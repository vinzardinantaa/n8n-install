#!/bin/bash

#############################################
# n8n Automation Installer by Vinz
# Advanced Installation & Management Script
# Version: 7.0 - Production Ready
# Author: Vinz
# Default Port: 5678 (n8n standard)
#############################################

# ============================================
# COLOR DEFINITIONS
# ============================================
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m' # No Color

# ============================================
# UNICODE CHARACTERS & ICONS
# ============================================
CHECK="✓"
CROSS="✗"
ARROW="➜"
STAR="★"
DOT="•"
PLAY="▶"
STOP="■"
RESTART="↻"
INSTALL="⬇"
UNINSTALL="🗑"
SETTINGS="⚙"
STATUS="📊"
PORT="🔌"
GLOBE="🌐"
DOCKER="🐳"
NODE="⬢"
PM2="⚡"
SYSTEMD="⚙"
BACKUP="💾"
UPDATE="🔄"
SSL="🔒"
INFO="ℹ"
WARNING="⚠"
WEBHOOK="🔗"

# ============================================
# CONFIGURATION PATHS
# ============================================
CONFIG_FILE="/etc/n8n-installer/config.conf"
LOG_FILE="/var/log/n8n-installer-$(date +%Y%m%d-%H%M%S).log"
INSTALL_LOCK="/etc/n8n-installer/.installed"
BACKUP_DIR="/var/backups/n8n"

# ============================================
# DEFAULT VALUES
# ============================================
DEFAULT_PORT="5678"  # n8n default port
DEFAULT_USER="n8n"
DEFAULT_HOME="/home/n8n"

# ============================================
# INITIALIZATION
# ============================================

# Create necessary directories
mkdir -p /etc/n8n-installer
mkdir -p $BACKUP_DIR

# Redirect errors to log
exec 2> >(tee -a "$LOG_FILE" >&2)

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}This script must be run as root${NC}"
    echo -e "${YELLOW}Please run: sudo $0${NC}"
    exit 1
fi

# ============================================
# SYSTEM DETECTION
# ============================================

detect_os() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS_TYPE=$ID
        OS_VERSION=$VERSION_ID
        OS_PRETTY=$PRETTY_NAME
    else
        OS_TYPE="unknown"
        OS_VERSION="unknown"
        OS_PRETTY="Unknown OS"
    fi
}

# ============================================
# CONFIGURATION MANAGEMENT
# ============================================

is_n8n_installed() {
    if [ -f "$INSTALL_LOCK" ] && [ -f "$CONFIG_FILE" ]; then
        return 0
    fi
    return 1
}

load_config() {
    if [[ -f $CONFIG_FILE ]]; then
        source $CONFIG_FILE
        return 0
    else
        return 1
    fi
}

save_config() {
    cat > $CONFIG_FILE <<EOF
INSTALL_METHOD=$INSTALL_METHOD
N8N_PORT=$N8N_PORT
N8N_DOMAIN=$N8N_DOMAIN
N8N_PROTOCOL=$N8N_PROTOCOL
N8N_USER=$N8N_USER
N8N_HOME=$N8N_HOME
N8N_VERSION=$N8N_VERSION
WEBHOOK_URL=$WEBHOOK_URL
WEBHOOK_TUNNEL_URL=${WEBHOOK_TUNNEL_URL:-}
INSTALL_DATE=$(date)
ENABLE_SSL=${ENABLE_SSL:-false}
SSL_EMAIL=${SSL_EMAIL:-}
BASIC_AUTH_USER=${BASIC_AUTH_USER:-}
BASIC_AUTH_PASS=${BASIC_AUTH_PASS:-}
EOF
    touch $INSTALL_LOCK
}

# ============================================
# UI HELPER FUNCTIONS
# ============================================

print_header() {
    clear
    echo -e "${CYAN}╔═══════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║${NC}                                                                             ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}           ${MAGENTA}${BOLD}n8n ${WHITE}AUTOMATION ${GREEN}INSTALLER${NC}  ${CYAN}v7.0${NC}                               ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}                        ${YELLOW}by Vinz${NC}                                             ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}                   ${DIM}Default Port: 5678${NC}                                       ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}                                                                             ${CYAN}║${NC}"
    echo -e "${CYAN}╚═══════════════════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

print_section() {
    echo ""
    echo -e "${WHITE}$1${NC}"
    echo -e "${CYAN}───────────────────────────────────────────────────────────────────────────${NC}"
}

show_spinner() {
    local pid=$1
    local task=$2
    local spin='⣾⣽⣻⢿⡿⣟⣯⣷'
    local i=0
    
    tput civis  # Hide cursor
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i+1) % ${#spin} ))
        printf "\r  ${CYAN}${spin:$i:1}${NC}  %s" "$task"
        sleep 0.1
    done
    
    wait $pid
    local result=$?
    
    if [ $result -eq 0 ]; then
        printf "\r  ${GREEN}${CHECK}${NC}  %s\n" "$task"
    else
        printf "\r  ${RED}${CROSS}${NC}  %s\n" "$task"
    fi
    
    tput cnorm  # Show cursor
    return $result
}

prompt_with_default() {
    local prompt=$1
    local default=$2
    local var_name=$3
    
    if [ -n "$default" ]; then
        read -p "  $prompt [${CYAN}$default${NC}]: " input
        eval "$var_name=\${input:-$default}"
    else
        read -p "  $prompt: " input
        eval "$var_name=\$input"
    fi
}

invalid_option() {
    echo -e "${RED}${CROSS} Invalid option${NC}"
    sleep 1
}

exit_script() {
    echo ""
    echo -e "${GREEN}Thank you for using n8n Installer!${NC}"
    echo ""
    exit 0
}

# ============================================
# VALIDATION FUNCTIONS
# ============================================

validate_port() {
    local port=$1
    
    if ! [[ "$port" =~ ^[0-9]+$ ]]; then
        echo -e "  ${RED}${CROSS} Port must be a number${NC}"
        return 1
    fi
    
    if [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        echo -e "  ${RED}${CROSS} Port must be between 1 and 65535${NC}"
        return 1
    fi
    
    if ss -tuln | grep -q ":$port "; then
        echo -e "  ${YELLOW}${WARNING} Port $port is already in use${NC}"
        read -p "  Continue anyway? [y/N]: " confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            return 1
        fi
    fi
    
    return 0
}

validate_domain() {
    local domain=$1
    
    if [ -z "$domain" ]; then
        return 0
    fi
    
    # Allow any domain format including subdomains
    if [[ "$domain" =~ ^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$ ]] || \
       [[ "$domain" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] || \
       [[ "$domain" =~ ^([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+$ ]]; then
        return 0
    else
        echo -e "  ${RED}${CROSS} Invalid domain format${NC}"
        echo -e "  ${DIM}Examples: example.com, sub.example.com, n8n.vinzz.my.id${NC}"
        return 1
    fi
}

# ============================================
# SYSTEM MONITORING
# ============================================

get_system_stats() {
    local cpu=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1 2>/dev/null || echo "0")
    local mem=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100.0}' 2>/dev/null || echo "0")
    local disk=$(df / | awk 'NR==2 {print $5}' | sed 's/%//' 2>/dev/null || echo "0")
    echo "$cpu|$mem|$disk"
}

check_n8n_status() {
    if ! is_n8n_installed; then
        echo "not_installed"
        return
    fi
    
    load_config
    
    case $INSTALL_METHOD in
        docker)
            if docker ps 2>/dev/null | grep -q n8n; then
                echo "running"
            elif docker ps -a 2>/dev/null | grep -q n8n; then
                echo "stopped"
            else
                echo "not_found"
            fi
            ;;
        pm2)
            if pm2 list 2>/dev/null | grep -q n8n; then
                if pm2 list 2>/dev/null | grep n8n | grep -q online; then
                    echo "running"
                else
                    echo "stopped"
                fi
            else
                echo "not_found"
            fi
            ;;
        systemd)
            if systemctl is-active n8n &>/dev/null; then
                echo "running"
            elif systemctl list-units --all 2>/dev/null | grep -q n8n.service; then
                echo "stopped"
            else
                echo "not_found"
            fi
            ;;
        *)
            echo "unknown"
            ;;
    esac
}

# ============================================
# INSTALLATION FUNCTIONS
# ============================================

install_dependencies_quiet() {
    if [[ "$OS_TYPE" == "ubuntu" ]] || [[ "$OS_TYPE" == "debian" ]]; then
        apt-get update &>/dev/null
        apt-get install -y curl wget git build-essential net-tools lsof &>/dev/null
    elif [[ "$OS_TYPE" == "centos" ]] || [[ "$OS_TYPE" == "rhel" ]]; then
        yum update -y &>/dev/null
        yum install -y curl wget git net-tools lsof &>/dev/null
    fi
}

install_docker_quiet() {
    if ! command -v docker &>/dev/null; then
        curl -fsSL https://get.docker.com -o /tmp/get-docker.sh &>/dev/null
        sh /tmp/get-docker.sh &>/dev/null
        systemctl start docker
        systemctl enable docker &>/dev/null
    fi
}

install_nodejs_quiet() {
    if ! command -v node &>/dev/null || [ $(node -v | sed 's/v//' | cut -d. -f1) -lt 18 ]; then
        if [[ "$OS_TYPE" == "ubuntu" ]] || [[ "$OS_TYPE" == "debian" ]]; then
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash - &>/dev/null
            apt-get install -y nodejs &>/dev/null
        elif [[ "$OS_TYPE" == "centos" ]] || [[ "$OS_TYPE" == "rhel" ]]; then
            curl -fsSL https://rpm.nodesource.com/setup_18.x | bash - &>/dev/null
            yum install -y nodejs &>/dev/null
        fi
    fi
}

install_pm2_quiet() {
    if ! command -v pm2 &>/dev/null; then
        npm install -g pm2 &>/dev/null
    fi
}

create_n8n_user_quiet() {
    if ! id "$N8N_USER" &>/dev/null; then
        useradd -m -d "$N8N_HOME" -s /bin/bash "$N8N_USER"
    fi
    mkdir -p "$N8N_HOME/.n8n"
    touch "$N8N_HOME/.n8n/config"
    chown -R "$N8N_USER:$N8N_USER" "$N8N_HOME"
    chmod -R 755 "$N8N_HOME/.n8n"
}

install_n8n_npm_quiet() {
    cd "$N8N_HOME"
    sudo -u "$N8N_USER" npm init -y &>/dev/null
    sudo -u "$N8N_USER" npm install n8n &>/dev/null
}

setup_docker_container() {
    docker pull n8nio/n8n:latest &>/dev/null
    
    mkdir -p /var/lib/n8n
    chmod -R 755 /var/lib/n8n
    
    local docker_env=""
    
    # Basic settings
    docker_env="-e N8N_PORT=5678"
    docker_env="$docker_env -e N8N_HOST=0.0.0.0"
    docker_env="$docker_env -e GENERIC_TIMEZONE=Asia/Jakarta"
    docker_env="$docker_env -e TZ=Asia/Jakarta"
    
    # SSL and cookie settings
    if [ "$ENABLE_SSL" = "true" ] && [ -n "$N8N_DOMAIN" ]; then
        docker_env="$docker_env -e N8N_SECURE_COOKIE=true"
        docker_env="$docker_env -e N8N_PROTOCOL=https"
    else
        docker_env="$docker_env -e N8N_SECURE_COOKIE=false"
        docker_env="$docker_env -e N8N_PROTOCOL=http"
    fi
    
    # Authentication
    if [ -n "$BASIC_AUTH_USER" ]; then
        docker_env="$docker_env -e N8N_BASIC_AUTH_ACTIVE=true"
        docker_env="$docker_env -e N8N_BASIC_AUTH_USER=$BASIC_AUTH_USER"
        docker_env="$docker_env -e N8N_BASIC_AUTH_PASSWORD=$BASIC_AUTH_PASS"
    fi
    
    # Webhook URL
    if [ -n "$WEBHOOK_URL" ]; then
        docker_env="$docker_env -e WEBHOOK_URL=$WEBHOOK_URL"
    fi
    
    # Tunnel URL if configured
    if [ -n "$WEBHOOK_TUNNEL_URL" ]; then
        docker_env="$docker_env -e N8N_TUNNEL_URL=$WEBHOOK_TUNNEL_URL"
    fi
    
    docker run -d \
        --name n8n \
        --restart unless-stopped \
        -p ${N8N_PORT}:5678 \
        -v /var/lib/n8n:/home/node/.n8n \
        --user root \
        $docker_env \
        n8nio/n8n:latest &>/dev/null
}

setup_pm2_service() {
    cat > ${N8N_HOME}/ecosystem.config.js <<EOF
module.exports = {
  apps: [{
    name: 'n8n',
    script: '${N8N_HOME}/node_modules/n8n/bin/n8n',
    env: {
      N8N_PORT: ${N8N_PORT},
      N8N_HOST: '0.0.0.0',
      NODE_ENV: 'production',
      N8N_PROTOCOL: '${N8N_PROTOCOL}',
      N8N_SECURE_COOKIE: '${ENABLE_SSL}',
      WEBHOOK_URL: '${WEBHOOK_URL}'
    }
  }]
};
EOF
    chown ${N8N_USER}:${N8N_USER} ${N8N_HOME}/ecosystem.config.js
    sudo -u ${N8N_USER} pm2 start ${N8N_HOME}/ecosystem.config.js &>/dev/null
    sudo -u ${N8N_USER} pm2 save &>/dev/null
    pm2 startup systemd -u ${N8N_USER} --hp ${N8N_HOME} &>/dev/null
}

setup_systemd_service() {
    cat > /etc/systemd/system/n8n.service <<EOF
[Unit]
Description=n8n - Workflow Automation Tool
After=network.target

[Service]
Type=simple
User=${N8N_USER}
Group=${N8N_USER}
WorkingDirectory=${N8N_HOME}
Environment="N8N_PORT=${N8N_PORT}"
Environment="N8N_HOST=0.0.0.0"
Environment="NODE_ENV=production"
Environment="N8N_PROTOCOL=${N8N_PROTOCOL}"
Environment="N8N_SECURE_COOKIE=${ENABLE_SSL}"
Environment="WEBHOOK_URL=${WEBHOOK_URL}"
ExecStart=${N8N_HOME}/node_modules/.bin/n8n
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
    systemctl daemon-reload
    systemctl enable n8n &>/dev/null
    systemctl start n8n
}

configure_firewall_quiet() {
    if command -v ufw &>/dev/null; then
        ufw allow ${N8N_PORT}/tcp &>/dev/null
    elif command -v firewall-cmd &>/dev/null; then
        firewall-cmd --permanent --add-port=${N8N_PORT}/tcp &>/dev/null
        firewall-cmd --reload &>/dev/null
    elif command -v iptables &>/dev/null; then
        iptables -A INPUT -p tcp --dport ${N8N_PORT} -j ACCEPT &>/dev/null
        service iptables save &>/dev/null 2>&1
    fi
}

setup_nginx_with_ssl() {
    if [[ "$OS_TYPE" == "ubuntu" ]] || [[ "$OS_TYPE" == "debian" ]]; then
        apt-get install -y nginx certbot python3-certbot-nginx &>/dev/null
    elif [[ "$OS_TYPE" == "centos" ]] || [[ "$OS_TYPE" == "rhel" ]]; then
        yum install -y nginx certbot python3-certbot-nginx &>/dev/null
    fi
    
    systemctl start nginx
    systemctl enable nginx &>/dev/null
    
    cat > /etc/nginx/sites-available/n8n <<EOF
server {
    listen 80;
    server_name $N8N_DOMAIN;
    
    location / {
        proxy_pass http://localhost:$N8N_PORT;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_buffering off;
        proxy_set_header X-Accel-Buffering no;
    }
}
EOF
    
    ln -sf /etc/nginx/sites-available/n8n /etc/nginx/sites-enabled/
    nginx -t &>/dev/null
    systemctl reload nginx
    
    if [ "$ENABLE_SSL" = "true" ] && [ -n "$SSL_EMAIL" ]; then
        certbot --nginx -d "$N8N_DOMAIN" --non-interactive --agree-tos --email "$SSL_EMAIL" &>/dev/null
    fi
}

# ============================================
# QUICK INSTALL
# ============================================

quick_install() {
    print_header
    print_section "QUICK INSTALLATION"
    
    # Check available methods
    local docker_status="${RED}Not Installed${NC}"
    local node_status="${RED}Not Installed${NC}"
    
    if command -v docker &>/dev/null; then
        docker_status="${GREEN}Installed${NC}"
    fi
    
    if command -v node &>/dev/null; then
        local node_ver=$(node -v | sed 's/v//' | cut -d. -f1)
        if [ "$node_ver" -ge 18 ]; then
            node_status="${GREEN}v$(node -v | sed 's/v//')${NC}"
        else
            node_status="${YELLOW}v$(node -v | sed 's/v//') (needs update)${NC}"
        fi
    fi
    
    echo -e "${WHITE}Installation Methods:${NC}"
    echo ""
    echo -e "  ${CYAN}1${NC} │ ${DOCKER} Docker     ${GRAY}($docker_status)${NC} ${GREEN}[Recommended]${NC}"
    echo -e "  ${CYAN}2${NC} │ ${PM2} PM2        ${GRAY}(Node.js: $node_status)${NC}"
    echo -e "  ${CYAN}3${NC} │ ${SYSTEMD} Systemd    ${GRAY}(Node.js: $node_status)${NC}"
    echo -e "  ${CYAN}0${NC} │ Cancel"
    echo ""
    
    read -p "  Select method: " method_choice
    
    case $method_choice in
        1) INSTALL_METHOD="docker" ;;
        2) INSTALL_METHOD="pm2" ;;
        3) INSTALL_METHOD="systemd" ;;
        0) return ;;
        *) 
            echo -e "${RED}${CROSS} Invalid option${NC}"
            sleep 2
            return
            ;;
    esac
    
    echo ""
    echo -e "  ${GREEN}${CHECK}${NC} Method: ${CYAN}${INSTALL_METHOD}${NC}"
    
    # Port configuration
    print_section "PORT CONFIGURATION"
    
    while true; do
        prompt_with_default "Enter port for n8n" "$DEFAULT_PORT" "N8N_PORT"
        
        if validate_port "$N8N_PORT"; then
            echo -e "  ${GREEN}${CHECK}${NC} Port ${CYAN}$N8N_PORT${NC} configured"
            break
        fi
    done
    
    # Domain configuration
    print_section "DOMAIN CONFIGURATION (Optional)"
    
    prompt_with_default "Enter domain (leave empty for IP access only)" "" "N8N_DOMAIN"
    
    ENABLE_SSL="false"
    N8N_PROTOCOL="http"
    
    if [ -n "$N8N_DOMAIN" ]; then
        if validate_domain "$N8N_DOMAIN"; then
            echo -e "  ${GREEN}${CHECK}${NC} Domain: ${CYAN}${N8N_DOMAIN}${NC}"
            
            echo ""
            read -p "  Enable SSL with Let's Encrypt? [y/N]: " enable_ssl
            
            if [[ "$enable_ssl" =~ ^[Yy]$ ]]; then
                while true; do
                    prompt_with_default "Email for SSL certificate" "" "SSL_EMAIL"
                    if [ -n "$SSL_EMAIL" ]; then
                        if [[ "$SSL_EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
                            ENABLE_SSL="true"
                            N8N_PROTOCOL="https"
                            echo -e "  ${GREEN}${CHECK}${NC} SSL will be configured"
                            break
                        else
                            echo -e "  ${RED}${CROSS} Invalid email format${NC}"
                        fi
                    else
                        break
                    fi
                done
            fi
        else
            N8N_DOMAIN=""
        fi
    fi
    
    # Set configuration
    if [[ "$INSTALL_METHOD" != "docker" ]]; then
        N8N_USER="$DEFAULT_USER"
        N8N_HOME="$DEFAULT_HOME"
    else
        N8N_USER="root"
        N8N_HOME="/var/lib/n8n"
    fi
    
    N8N_VERSION="latest"
    SERVER_IP=$(hostname -I | awk '{print $1}')
    
    if [ -n "$N8N_DOMAIN" ]; then
        if [ "$ENABLE_SSL" = "true" ]; then
            WEBHOOK_URL="https://${N8N_DOMAIN}/"
        else
            WEBHOOK_URL="http://${N8N_DOMAIN}:${N8N_PORT}/"
        fi
    else
        WEBHOOK_URL="http://${SERVER_IP}:${N8N_PORT}/"
    fi
    
    # Summary
    print_section "INSTALLATION SUMMARY"
    
    echo -e "  Method:      ${CYAN}${INSTALL_METHOD}${NC}"
    echo -e "  Port:        ${CYAN}${N8N_PORT}${NC}"
    
    if [ -n "$N8N_DOMAIN" ]; then
        echo -e "  Domain:      ${CYAN}${N8N_DOMAIN}${NC}"
        echo -e "  SSL:         ${CYAN}${ENABLE_SSL}${NC}"
    fi
    
    echo -e "  Access URL:  ${CYAN}${WEBHOOK_URL}${NC}"
    echo ""
    
    read -p "  Proceed with installation? [Y/n]: " confirm
    confirm=${confirm:-Y}
    
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo -e "  ${YELLOW}Installation cancelled${NC}"
        sleep 2
        return
    fi
    
    perform_installation
}

# ============================================
# CUSTOM INSTALL
# ============================================

custom_install() {
    print_header
    print_section "CUSTOM INSTALLATION"
    
    # Method selection
    echo -e "${WHITE}Step 1: Installation Method${NC}"
    echo ""
    
    local docker_status="${RED}Not Installed${NC}"
    local node_status="${RED}Not Installed${NC}"
    
    if command -v docker &>/dev/null; then
        docker_status="${GREEN}Installed${NC}"
    fi
    
    if command -v node &>/dev/null; then
        local node_ver=$(node -v | sed 's/v//' | cut -d. -f1)
        if [ "$node_ver" -ge 18 ]; then
            node_status="${GREEN}v$(node -v | sed 's/v//')${NC}"
        else
            node_status="${YELLOW}v$(node -v | sed 's/v//') (needs update)${NC}"
        fi
    fi
    
    echo -e "  ${CYAN}1${NC} │ ${DOCKER} Docker     ${GRAY}($docker_status)${NC}"
    echo -e "  ${CYAN}2${NC} │ ${PM2} PM2        ${GRAY}(Node.js: $node_status)${NC}"
    echo -e "  ${CYAN}3${NC} │ ${SYSTEMD} Systemd    ${GRAY}(Node.js: $node_status)${NC}"
    echo -e "  ${CYAN}0${NC} │ Cancel"
    echo ""
    
    read -p "  Select: " method_choice
    
    case $method_choice in
        1) INSTALL_METHOD="docker" ;;
        2) INSTALL_METHOD="pm2" ;;
        3) INSTALL_METHOD="systemd" ;;
        0) return ;;
        *) 
            echo -e "${RED}${CROSS} Invalid option${NC}"
            sleep 2
            return
            ;;
    esac
    
    echo -e "  ${GREEN}${CHECK}${NC} Method: ${CYAN}${INSTALL_METHOD}${NC}"
    
    # Port configuration
    print_section "Step 2: Port Configuration"
    
    while true; do
        prompt_with_default "Enter port" "$DEFAULT_PORT" "N8N_PORT"
        
        if validate_port "$N8N_PORT"; then
            echo -e "  ${GREEN}${CHECK}${NC} Port: ${CYAN}${N8N_PORT}${NC}"
            break
        fi
    done
    
    # Domain configuration
    print_section "Step 3: Domain Configuration"
    
    prompt_with_default "Enter domain (optional)" "" "N8N_DOMAIN"
    
    ENABLE_SSL="false"
    N8N_PROTOCOL="http"
    
    if [ -n "$N8N_DOMAIN" ]; then
        if validate_domain "$N8N_DOMAIN"; then
            echo -e "  ${GREEN}${CHECK}${NC} Domain: ${CYAN}${N8N_DOMAIN}${NC}"
            
            echo ""
            read -p "  Enable SSL? [y/N]: " enable_ssl
            
            if [[ "$enable_ssl" =~ ^[Yy]$ ]]; then
                prompt_with_default "SSL email" "" "SSL_EMAIL"
                if [ -n "$SSL_EMAIL" ]; then
                    ENABLE_SSL="true"
                    N8N_PROTOCOL="https"
                fi
            fi
        else
            N8N_DOMAIN=""
        fi
    fi
    
    # Authentication
    print_section "Step 4: Authentication (Optional)"
    
    read -p "  Enable basic authentication? [y/N]: " enable_auth
    
    if [[ "$enable_auth" =~ ^[Yy]$ ]]; then
        prompt_with_default "Username" "" "BASIC_AUTH_USER"
        read -s -p "  Password: " BASIC_AUTH_PASS
        echo ""
        echo -e "  ${GREEN}${CHECK}${NC} Authentication configured"
    fi
    
    # Advanced options
    if [[ "$INSTALL_METHOD" != "docker" ]]; then
        print_section "Step 5: Advanced Options"
        
        prompt_with_default "n8n user" "$DEFAULT_USER" "N8N_USER"
        prompt_with_default "n8n directory" "$DEFAULT_HOME" "N8N_HOME"
        
        echo -e "  ${GREEN}${CHECK}${NC} User: ${CYAN}${N8N_USER}${NC}"
        echo -e "  ${GREEN}${CHECK}${NC} Directory: ${CYAN}${N8N_HOME}${NC}"
    else
        N8N_USER="root"
        N8N_HOME="/var/lib/n8n"
    fi
    
    # Set remaining configuration
    N8N_VERSION="latest"
    SERVER_IP=$(hostname -I | awk '{print $1}')
    
    if [ -n "$N8N_DOMAIN" ]; then
        if [ "$ENABLE_SSL" = "true" ]; then
            WEBHOOK_URL="https://${N8N_DOMAIN}/"
        else
            WEBHOOK_URL="http://${N8N_DOMAIN}:${N8N_PORT}/"
        fi
    else
        WEBHOOK_URL="http://${SERVER_IP}:${N8N_PORT}/"
    fi
    
    # Summary
    print_section "INSTALLATION SUMMARY"
    
    echo -e "  Method:         ${CYAN}${INSTALL_METHOD}${NC}"
    echo -e "  Port:           ${CYAN}${N8N_PORT}${NC}"
    
    if [ -n "$N8N_DOMAIN" ]; then
        echo -e "  Domain:         ${CYAN}${N8N_DOMAIN}${NC}"
        echo -e "  SSL:            ${CYAN}${ENABLE_SSL}${NC}"
    fi
    
    if [ -n "$BASIC_AUTH_USER" ]; then
        echo -e "  Authentication: ${CYAN}Enabled${NC}"
    fi
    
    echo -e "  Webhook URL:    ${CYAN}${WEBHOOK_URL}${NC}"
    echo ""
    
    read -p "  Proceed? [Y/n]: " confirm
    confirm=${confirm:-Y}
    
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo -e "  ${YELLOW}Installation cancelled${NC}"
        sleep 2
        return
    fi
    
    perform_installation
}

# ============================================
# INSTALLATION PROCESS
# ============================================

perform_installation() {
    print_section "INSTALLING N8N"
    
    # Installation steps
    local steps=()
    
    if [[ "$INSTALL_METHOD" == "docker" ]]; then
        steps=("install_dependencies" "install_docker" "setup_n8n_docker" "configure_firewall")
        
        if [ "$ENABLE_SSL" = "true" ] && [ -n "$N8N_DOMAIN" ]; then
            steps+=("setup_nginx_ssl")
        fi
    else
        steps=("install_dependencies" "install_nodejs" "create_user" "install_n8n" "setup_service" "configure_firewall")
        
        if [ "$ENABLE_SSL" = "true" ] && [ -n "$N8N_DOMAIN" ]; then
            steps+=("setup_nginx_ssl")
        fi
    fi
    
    for step in "${steps[@]}"; do
        case $step in
            install_dependencies)
                install_dependencies_quiet &
                show_spinner $! "Installing system packages"
                ;;
            install_docker)
                install_docker_quiet &
                show_spinner $! "Installing Docker"
                ;;
            install_nodejs)
                install_nodejs_quiet &
                show_spinner $! "Installing Node.js 18"
                ;;
            create_user)
                create_n8n_user_quiet &
                show_spinner $! "Creating n8n user"
                ;;
            install_n8n)
                if [[ "$INSTALL_METHOD" == "pm2" ]]; then
                    install_pm2_quiet &
                    show_spinner $! "Installing PM2"
                fi
                install_n8n_npm_quiet &
                show_spinner $! "Installing n8n"
                ;;
            setup_n8n_docker)
                setup_docker_container &
                show_spinner $! "Setting up Docker container"
                ;;
            setup_service)
                if [[ "$INSTALL_METHOD" == "pm2" ]]; then
                    setup_pm2_service &
                    show_spinner $! "Configuring PM2 service"
                else
                    setup_systemd_service &
                    show_spinner $! "Configuring systemd service"
                fi
                ;;
            configure_firewall)
                configure_firewall_quiet &
                show_spinner $! "Configuring firewall"
                ;;
            setup_nginx_ssl)
                setup_nginx_with_ssl &
                show_spinner $! "Setting up SSL"
                ;;
        esac
    done
    
    save_config
    show_installation_complete
}

show_installation_complete() {
    echo ""
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "                    ${GREEN}${CHECK} INSTALLATION SUCCESSFUL!${NC}"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    
    print_section "ACCESS INFORMATION"
    
    local SERVER_IP=$(hostname -I | awk '{print $1}')
    
    if [ -n "$N8N_DOMAIN" ] && [ "$ENABLE_SSL" = "true" ]; then
        echo -e "  ${GLOBE} URL: ${GREEN}${BOLD}https://${N8N_DOMAIN}${NC}"
    elif [ -n "$N8N_DOMAIN" ]; then
        echo -e "  ${GLOBE} URL: ${GREEN}${BOLD}http://${N8N_DOMAIN}:${N8N_PORT}${NC}"
    else
        echo -e "  ${GLOBE} URL: ${GREEN}${BOLD}http://${SERVER_IP}:${N8N_PORT}${NC}"
    fi
    
    echo ""
    echo -e "  Method: ${CYAN}${INSTALL_METHOD}${NC}"
    echo -e "  Port:   ${CYAN}${N8N_PORT}${NC}"
    echo -e "  Status: ${GREEN}Active${NC}"
    
    if [ -n "$BASIC_AUTH_USER" ]; then
        echo -e "  Auth:   ${CYAN}${BASIC_AUTH_USER}${NC}"
    fi
    
    print_section "USEFUL COMMANDS"
    
    case $INSTALL_METHOD in
        docker)
            echo -e "  Start:   ${CYAN}docker start n8n${NC}"
            echo -e "  Stop:    ${CYAN}docker stop n8n${NC}"
            echo -e "  Logs:    ${CYAN}docker logs n8n${NC}"
            ;;
        pm2)
            echo -e "  Start:   ${CYAN}pm2 start n8n${NC}"
            echo -e "  Stop:    ${CYAN}pm2 stop n8n${NC}"
            echo -e "  Logs:    ${CYAN}pm2 logs n8n${NC}"
            ;;
        systemd)
            echo -e "  Start:   ${CYAN}systemctl start n8n${NC}"
            echo -e "  Stop:    ${CYAN}systemctl stop n8n${NC}"
            echo -e "  Logs:    ${CYAN}journalctl -u n8n -f${NC}"
            ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..."
}

# ============================================
# SERVICE CONTROL FUNCTIONS
# ============================================

start_n8n() {
    load_config
    print_header
    print_section "STARTING N8N SERVICE"
    
    case $INSTALL_METHOD in
        docker)
            docker start n8n &
            show_spinner $! "Starting Docker container"
            ;;
        pm2)
            pm2 start n8n &
            show_spinner $! "Starting PM2 service"
            ;;
        systemd)
            systemctl start n8n &
            show_spinner $! "Starting systemd service"
            ;;
    esac
    
    echo ""
    echo -e "${GREEN}Service started successfully!${NC}"
    echo ""
    read -p "Press Enter to continue..."
}

stop_n8n() {
    load_config
    print_header
    print_section "STOPPING N8N SERVICE"
    
    case $INSTALL_METHOD in
        docker)
            docker stop n8n &
            show_spinner $! "Stopping Docker container"
            ;;
        pm2)
            pm2 stop n8n &
            show_spinner $! "Stopping PM2 service"
            ;;
        systemd)
            systemctl stop n8n &
            show_spinner $! "Stopping systemd service"
            ;;
    esac
    
    echo ""
    echo -e "${YELLOW}Service stopped${NC}"
    echo ""
    read -p "Press Enter to continue..."
}

restart_n8n() {
    load_config
    print_header
    print_section "RESTARTING N8N SERVICE"
    
    case $INSTALL_METHOD in
        docker)
            docker restart n8n &
            show_spinner $! "Restarting Docker container"
            ;;
        pm2)
            pm2 restart n8n &
            show_spinner $! "Restarting PM2 service"
            ;;
        systemd)
            systemctl restart n8n &
            show_spinner $! "Restarting systemd service"
            ;;
    esac
    
    echo ""
    echo -e "${GREEN}Service restarted successfully!${NC}"
    echo ""
    read -p "Press Enter to continue..."
}

# ============================================
# BACKUP & RESTORE FUNCTIONS
# ============================================

backup_restore_menu() {
    load_config
    print_header
    print_section "BACKUP & RESTORE"
    
    echo -e "  ${CYAN}1${NC} │ ${BACKUP} Create Backup"
    echo -e "  ${CYAN}2${NC} │ ${BACKUP} Restore from Backup"
    echo -e "  ${CYAN}3${NC} │ ${BACKUP} List Backups"
    echo -e "  ${CYAN}4${NC} │ ${BACKUP} Delete Old Backups"
    echo -e "  ${CYAN}5${NC} │ ${SETTINGS} Schedule Automatic Backups"
    echo ""
    echo -e "  ${CYAN}0${NC} │ Back"
    echo ""
    
    read -p "  Select: " backup_choice
    
    case $backup_choice in
        1) create_backup ;;
        2) restore_backup ;;
        3) list_backups ;;
        4) delete_old_backups ;;
        5) schedule_backups ;;
        0) return ;;
        *) invalid_option ;;
    esac
    
    backup_restore_menu
}

create_backup() {
    print_section "CREATE BACKUP"
    
    local backup_name="n8n-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
    local backup_path="${BACKUP_DIR}/${backup_name}"
    
    echo -n "  Stopping n8n service..."
    case $INSTALL_METHOD in
        docker)
            docker stop n8n 2>/dev/null
            ;;
        pm2)
            pm2 stop n8n 2>/dev/null
            ;;
        systemd)
            systemctl stop n8n 2>/dev/null
            ;;
    esac
    echo -e " ${GREEN}${CHECK}${NC}"
    
    echo -n "  Creating backup..."
    
    case $INSTALL_METHOD in
        docker)
            tar -czf "$backup_path" -C /var/lib n8n 2>/dev/null
            ;;
        *)
            tar -czf "$backup_path" -C "$N8N_HOME" .n8n 2>/dev/null
            ;;
    esac
    
    if [ $? -eq 0 ]; then
        echo -e " ${GREEN}${CHECK}${NC}"
        local backup_size=$(du -h "$backup_path" | cut -f1)
        echo ""
        echo -e "  Backup: ${CYAN}${backup_name}${NC}"
        echo -e "  Size:   ${CYAN}${backup_size}${NC}"
        echo -e "  Path:   ${CYAN}${backup_path}${NC}"
    else
        echo -e " ${RED}${CROSS} Failed${NC}"
    fi
    
    echo -n "  Restarting n8n service..."
    case $INSTALL_METHOD in
        docker)
            docker start n8n 2>/dev/null
            ;;
        pm2)
            pm2 start n8n 2>/dev/null
            ;;
        systemd)
            systemctl start n8n 2>/dev/null
            ;;
    esac
    echo -e " ${GREEN}${CHECK}${NC}"
    
    echo ""
    read -p "Press Enter to continue..."
}

restore_backup() {
    print_section "RESTORE BACKUP"
    
    if [ ! -d "$BACKUP_DIR" ] || [ ! "$(ls -A $BACKUP_DIR 2>/dev/null)" ]; then
        echo -e "  ${GRAY}No backups found${NC}"
        echo ""
        read -p "Press Enter to continue..."
        return
    fi
    
    local backups=($(ls -t $BACKUP_DIR/*.tar.gz 2>/dev/null))
    local i=1
    
    for backup in "${backups[@]}"; do
        local backup_name=$(basename "$backup")
        local backup_size=$(du -h "$backup" | cut -f1)
        local backup_date=$(stat -c %y "$backup" | cut -d' ' -f1,2 | cut -d'.' -f1)
        
        echo -e "  ${CYAN}$i${NC} │ $backup_name"
        echo -e "      Size: $backup_size | Date: $backup_date"
        ((i++))
    done
    
    echo ""
    echo -e "  ${CYAN}0${NC} │ Cancel"
    echo ""
    
    read -p "  Select backup: " backup_choice
    
    if [ "$backup_choice" = "0" ]; then
        return
    fi
    
    if [ "$backup_choice" -lt 1 ] || [ "$backup_choice" -gt "${#backups[@]}" ]; then
        echo -e "${RED}Invalid selection${NC}"
        sleep 2
        return
    fi
    
    local selected_backup="${backups[$((backup_choice-1))]}"
    
    echo ""
    echo -e "${YELLOW}${WARNING} This will overwrite current data!${NC}"
    read -p "  Continue? [y/N]: " confirm
    
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        return
    fi
    
    echo ""
    
    echo -n "  Stopping n8n service..."
    case $INSTALL_METHOD in
        docker)
            docker stop n8n 2>/dev/null
            ;;
        pm2)
            pm2 stop n8n 2>/dev/null
            ;;
        systemd)
            systemctl stop n8n 2>/dev/null
            ;;
    esac
    echo -e " ${GREEN}${CHECK}${NC}"
    
    echo -n "  Restoring data..."
    
    case $INSTALL_METHOD in
        docker)
            rm -rf /var/lib/n8n/*
            tar -xzf "$selected_backup" -C /var/lib/ 2>/dev/null
            ;;
        *)
            rm -rf "$N8N_HOME/.n8n"
            tar -xzf "$selected_backup" -C "$N8N_HOME/" 2>/dev/null
            chown -R "$N8N_USER:$N8N_USER" "$N8N_HOME/.n8n"
            ;;
    esac
    
    if [ $? -eq 0 ]; then
        echo -e " ${GREEN}${CHECK}${NC}"
    else
        echo -e " ${RED}${CROSS} Failed${NC}"
    fi
    
    echo -n "  Restarting n8n service..."
    case $INSTALL_METHOD in
        docker)
            docker start n8n 2>/dev/null
            ;;
        pm2)
            pm2 start n8n 2>/dev/null
            ;;
        systemd)
            systemctl start n8n 2>/dev/null
            ;;
    esac
    echo -e " ${GREEN}${CHECK}${NC}"
    
    echo ""
    echo -e "${GREEN}${CHECK} Backup restored successfully!${NC}"
    echo ""
    read -p "Press Enter to continue..."
}

list_backups() {
    print_section "AVAILABLE BACKUPS"
    
    if [ -d "$BACKUP_DIR" ] && [ "$(ls -A $BACKUP_DIR 2>/dev/null)" ]; then
        local i=1
        for backup in $(ls -t $BACKUP_DIR/*.tar.gz 2>/dev/null); do
            local backup_name=$(basename "$backup")
            local backup_size=$(du -h "$backup" | cut -f1)
            local backup_date=$(stat -c %y "$backup" | cut -d' ' -f1,2 | cut -d'.' -f1)
            
            echo -e "  ${CYAN}$i${NC} │ $backup_name"
            echo -e "      Size: $backup_size | Date: $backup_date"
            ((i++))
        done
    else
        echo -e "  ${GRAY}No backups found${NC}"
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

delete_old_backups() {
    print_section "DELETE OLD BACKUPS"
    
    echo -e "  ${CYAN}1${NC} │ Delete backups older than 7 days"
    echo -e "  ${CYAN}2${NC} │ Delete backups older than 30 days"
    echo -e "  ${CYAN}3${NC} │ Keep only last 5 backups"
    echo -e "  ${CYAN}4${NC} │ Delete all backups"
    echo -e "  ${CYAN}0${NC} │ Cancel"
    echo ""
    
    read -p "  Select: " delete_choice
    
    case $delete_choice in
        1)
            find $BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete
            echo -e "  ${GREEN}${CHECK} Deleted backups older than 7 days${NC}"
            ;;
        2)
            find $BACKUP_DIR -name "*.tar.gz" -mtime +30 -delete
            echo -e "  ${GREEN}${CHECK} Deleted backups older than 30 days${NC}"
            ;;
        3)
            ls -t $BACKUP_DIR/*.tar.gz 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null
            echo -e "  ${GREEN}${CHECK} Kept only last 5 backups${NC}"
            ;;
        4)
            echo ""
            echo -e "${RED}Delete ALL backups?${NC}"
            read -p "  Type 'yes' to confirm: " confirm
            if [ "$confirm" = "yes" ]; then
                rm -f $BACKUP_DIR/*.tar.gz
                echo -e "  ${GREEN}${CHECK} All backups deleted${NC}"
            else
                echo -e "  ${YELLOW}Cancelled${NC}"
            fi
            ;;
        0) return ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..."
}

schedule_backups() {
    print_section "SCHEDULE AUTOMATIC BACKUPS"
    
    echo -e "  ${CYAN}1${NC} │ Daily at 2:00 AM"
    echo -e "  ${CYAN}2${NC} │ Weekly (Sunday at 2:00 AM)"
    echo -e "  ${CYAN}3${NC} │ Monthly (1st day at 2:00 AM)"
    echo -e "  ${CYAN}4${NC} │ Custom schedule"
    echo -e "  ${CYAN}5${NC} │ Disable automatic backups"
    echo -e "  ${CYAN}0${NC} │ Cancel"
    echo ""
    
    read -p "  Select: " schedule_choice
    
    local cron_schedule=""
    
    case $schedule_choice in
        1) cron_schedule="0 2 * * *" ;;
        2) cron_schedule="0 2 * * 0" ;;
        3) cron_schedule="0 2 1 * *" ;;
        4)
            echo ""
            read -p "  Enter cron schedule: " cron_schedule
            ;;
        5)
            crontab -l 2>/dev/null | grep -v "n8n-backup" | crontab -
            echo -e "  ${GREEN}${CHECK} Automatic backups disabled${NC}"
            echo ""
            read -p "Press Enter to continue..."
            return
            ;;
        0) return ;;
    esac
    
    if [ -n "$cron_schedule" ]; then
        cat > /usr/local/bin/n8n-backup.sh <<'EOF'
#!/bin/bash
source /etc/n8n-installer/config.conf
BACKUP_DIR="/var/backups/n8n"
backup_name="n8n-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
backup_path="${BACKUP_DIR}/${backup_name}"

case $INSTALL_METHOD in
    docker)
        docker stop n8n 2>/dev/null
        tar -czf "$backup_path" -C /var/lib n8n 2>/dev/null
        docker start n8n 2>/dev/null
        ;;
    *)
        tar -czf "$backup_path" -C "$N8N_HOME" .n8n 2>/dev/null
        ;;
esac

ls -t $BACKUP_DIR/*.tar.gz 2>/dev/null | tail -n +11 | xargs rm -f 2>/dev/null
EOF
        
        chmod +x /usr/local/bin/n8n-backup.sh
        
        (crontab -l 2>/dev/null | grep -v "n8n-backup"; echo "$cron_schedule /usr/local/bin/n8n-backup.sh") | crontab -
        
        echo -e "  ${GREEN}${CHECK} Automatic backups scheduled${NC}"
        echo -e "  Schedule: ${CYAN}${cron_schedule}${NC}"
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

# ============================================
# UPDATE & UNINSTALL FUNCTIONS
# ============================================

update_n8n() {
    load_config
    print_header
    print_section "UPDATE N8N"
    
    echo "  Checking for updates..."
    echo ""
    
    case $INSTALL_METHOD in
        docker)
            docker pull n8nio/n8n:latest &
            show_spinner $! "Pulling latest image"
            
            echo -n "  Recreating container..."
            docker stop n8n 2>/dev/null
            docker rm n8n 2>/dev/null
            setup_docker_container
            echo -e " ${GREEN}${CHECK}${NC}"
            
            echo ""
            echo -e "${GREEN}${CHECK} n8n updated successfully!${NC}"
            ;;
        pm2)
            cd "$N8N_HOME"
            sudo -u "$N8N_USER" npm update n8n &
            show_spinner $! "Updating n8n package"
            
            pm2 restart n8n &
            show_spinner $! "Restarting service"
            
            echo ""
            echo -e "${GREEN}${CHECK} n8n updated successfully!${NC}"
            ;;
        systemd)
            cd "$N8N_HOME"
            sudo -u "$N8N_USER" npm update n8n &
            show_spinner $! "Updating n8n package"
            
            systemctl restart n8n &
            show_spinner $! "Restarting service"
            
            echo ""
            echo -e "${GREEN}${CHECK} n8n updated successfully!${NC}"
            ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..."
}

uninstall_menu() {
    load_config
    print_header
    print_section "UNINSTALL N8N"
    
    echo -e "${YELLOW}${WARNING} This will remove n8n from your system${NC}"
    echo ""
    echo -e "  Method: ${CYAN}${INSTALL_METHOD}${NC}"
    echo -e "  Port:   ${CYAN}${N8N_PORT}${NC}"
    echo -e "  Date:   ${CYAN}${INSTALL_DATE}${NC}"
    echo ""
    
    echo -e "  ${CYAN}1${NC} │ Complete Uninstall (remove everything)"
    echo -e "  ${CYAN}2${NC} │ Keep Data (remove n8n but keep workflows)"
    echo -e "  ${CYAN}3${NC} │ Backup & Uninstall"
    echo -e "  ${CYAN}0${NC} │ Cancel"
    echo ""
    
    read -p "  Select: " uninstall_choice
    
    case $uninstall_choice in
        1) complete_uninstall ;;
        2) uninstall_keep_data ;;
        3) backup_and_uninstall ;;
        0) return ;;
        *) invalid_option ;;
    esac
}

complete_uninstall() {
    echo ""
    echo -e "${RED}This will remove all n8n data!${NC}"
    read -p "  Type 'yes' to confirm: " confirm
    
    if [ "$confirm" != "yes" ]; then
        echo -e "${YELLOW}Cancelled${NC}"
        sleep 2
        return
    fi
    
    print_section "UNINSTALLING N8N"
    
    echo "  Stopping service..."
    case $INSTALL_METHOD in
        docker)
            docker stop n8n 2>/dev/null
            docker rm n8n 2>/dev/null
            docker rmi n8nio/n8n 2>/dev/null
            rm -rf /var/lib/n8n
            ;;
        pm2)
            pm2 stop n8n 2>/dev/null
            pm2 delete n8n 2>/dev/null
            rm -rf "$N8N_HOME"
            ;;
        systemd)
            systemctl stop n8n 2>/dev/null
            systemctl disable n8n 2>/dev/null
            rm -f /etc/systemd/system/n8n.service
            rm -rf "$N8N_HOME"
            ;;
    esac
    
    rm -f $CONFIG_FILE
    rm -f $INSTALL_LOCK
    
    echo ""
    echo -e "${GREEN}${CHECK} n8n has been completely uninstalled${NC}"
    echo ""
    read -p "Press Enter to continue..."
    exit 0
}

uninstall_keep_data() {
    echo ""
    echo -e "${YELLOW}This will remove n8n but keep your workflows${NC}"
    read -p "  Continue? [Y/n]: " confirm
    confirm=${confirm:-Y}
    
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        return
    fi
    
    echo ""
    echo "  Removing n8n (keeping data)..."
    
    case $INSTALL_METHOD in
        docker)
            docker stop n8n 2>/dev/null
            docker rm n8n 2>/dev/null
            docker rmi n8nio/n8n 2>/dev/null
            echo -e "  ${GREEN}${CHECK} Data preserved in /var/lib/n8n${NC}"
            ;;
        pm2)
            pm2 stop n8n 2>/dev/null
            pm2 delete n8n 2>/dev/null
            echo -e "  ${GREEN}${CHECK} Data preserved in ${N8N_HOME}/.n8n${NC}"
            ;;
        systemd)
            systemctl stop n8n 2>/dev/null
            systemctl disable n8n 2>/dev/null
            rm -f /etc/systemd/system/n8n.service
            echo -e "  ${GREEN}${CHECK} Data preserved in ${N8N_HOME}/.n8n${NC}"
            ;;
    esac
    
    rm -f $CONFIG_FILE
    rm -f $INSTALL_LOCK
    
    echo ""
    echo -e "${GREEN}${CHECK} n8n removed but data preserved${NC}"
    echo ""
    read -p "Press Enter to continue..."
    exit 0
}

backup_and_uninstall() {
    echo ""
    echo "  Creating backup before uninstall..."
    create_backup
    
    echo ""
    echo -e "${YELLOW}Proceed with uninstall?${NC}"
    read -p "  Continue? [Y/n]: " confirm
    confirm=${confirm:-Y}
    
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        return
    fi
    
    complete_uninstall
}

# ============================================
# UTILITY FUNCTIONS
# ============================================

view_logs() {
    load_config
    print_header
    print_section "N8N LOGS"
    
    case $INSTALL_METHOD in
        docker)
            docker logs n8n --tail 50
            ;;
        pm2)
            pm2 logs n8n --lines 50
            ;;
        systemd)
            journalctl -u n8n -n 50 --no-pager
            ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..."
}

check_port() {
    print_header
    print_section "PORT CHECK"
    
    if load_config 2>/dev/null; then
        local port=$N8N_PORT
        echo -e "  Checking configured port: ${CYAN}$port${NC}"
    else
        prompt_with_default "Enter port to check" "$DEFAULT_PORT" "port"
    fi
    
    echo ""
    
    echo -n "  Port binding: "
    if ss -tuln | grep -q ":$port "; then
        echo -e "${GREEN}In use${NC}"
        
        local process=$(lsof -i :$port 2>/dev/null | grep LISTEN | awk '{print $1}' | head -1)
        if [ -n "$process" ]; then
            echo -e "  Process: ${CYAN}$process${NC}"
        fi
    else
        echo -e "${GRAY}Available${NC}"
    fi
    
    echo -n "  Firewall: "
    if command -v ufw &>/dev/null && ufw status | grep -q "$port"; then
        echo -e "${GREEN}Open${NC}"
    elif command -v firewall-cmd &>/dev/null && firewall-cmd --list-ports | grep -q "$port"; then
        echo -e "${GREEN}Open${NC}"
    else
        echo -e "${YELLOW}May be blocked${NC}"
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

test_access() {
    load_config
    print_header
    print_section "TEST ACCESS"
    
    local server_ip=$(hostname -I | awk '{print $1}')
    local public_ip=$(curl -s ifconfig.me 2>/dev/null || echo "N/A")
    
    echo -e "  ${WHITE}Access URLs:${NC}"
    echo ""
    echo -e "  Local:    ${CYAN}http://localhost:${N8N_PORT}${NC}"
    echo -e "  Network:  ${CYAN}http://${server_ip}:${N8N_PORT}${NC}"
    echo -e "  Public:   ${CYAN}http://${public_ip}:${N8N_PORT}${NC}"
    
    if [ -n "$N8N_DOMAIN" ]; then
        echo -e "  Domain:   ${CYAN}${N8N_PROTOCOL}://${N8N_DOMAIN}${NC}"
    fi
    
    echo ""
    echo -e "  ${WHITE}Testing Connectivity:${NC}"
    echo ""
    
    echo -n "  Local: "
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:${N8N_PORT} 2>/dev/null | grep -q "200\|302"; then
        echo -e "${GREEN}Working${NC}"
    else
        echo -e "${RED}Failed${NC}"
    fi
    
    echo -n "  Port ${N8N_PORT}: "
    if nc -zv localhost $N8N_PORT &>/dev/null; then
        echo -e "${GREEN}Open${NC}"
    else
        echo -e "${RED}Closed${NC}"
    fi
    
    if [ -n "$N8N_DOMAIN" ]; then
        echo -n "  Domain: "
        if curl -s -o /dev/null -w "%{http_code}" "${N8N_PROTOCOL}://${N8N_DOMAIN}" 2>/dev/null | grep -q "200\|302"; then
            echo -e "${GREEN}Working${NC}"
        else
            echo -e "${RED}Failed${NC}"
        fi
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

system_info() {
    print_header
    print_section "SYSTEM INFORMATION"
    
    echo -e "  OS:      ${CYAN}${OS_PRETTY}${NC}"
    echo -e "  Kernel:  ${CYAN}$(uname -r)${NC}"
    echo -e "  CPU:     ${CYAN}$(lscpu | grep 'Model name' | sed 's/Model name://g' | xargs)${NC}"
    echo -e "  Cores:   ${CYAN}$(nproc)${NC}"
    echo -e "  Memory:  ${CYAN}$(free -h | awk '/^Mem:/ {print $2}')${NC}"
    echo -e "  Used:    ${CYAN}$(free -h | awk '/^Mem:/ {print $3}')${NC}"
    echo -e "  Disk:    ${CYAN}$(df -h / | awk 'NR==2 {print $2}')${NC}"
    echo -e "  Used:    ${CYAN}$(df -h / | awk 'NR==2 {print $3}')${NC}"
    echo -e "  Uptime:  ${CYAN}$(uptime -p)${NC}"
    echo ""
    
    echo -e "  ${WHITE}Software:${NC}"
    
    echo -n "  Docker:  "
    if command -v docker &>/dev/null; then
        echo -e "${GREEN}$(docker --version | awk '{print $3}' | sed 's/,//')${NC}"
    else
        echo -e "${RED}Not installed${NC}"
    fi
    
    echo -n "  Node.js: "
    if command -v node &>/dev/null; then
        echo -e "${GREEN}$(node --version)${NC}"
    else
        echo -e "${RED}Not installed${NC}"
    fi
    
    echo -n "  PM2:     "
    if command -v pm2 &>/dev/null; then
        echo -e "${GREEN}$(pm2 --version)${NC}"
    else
        echo -e "${GRAY}Not installed${NC}"
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

# ============================================
# SETTINGS MENU
# ============================================

settings_menu() {
    load_config
    print_header
    print_section "SETTINGS"
    
    echo -e "  ${CYAN}1${NC} │ ${PORT} Change Port (Current: ${N8N_PORT})"
    echo -e "  ${CYAN}2${NC} │ ${GLOBE} Change Domain (Current: ${N8N_DOMAIN:-Not set})"
    echo -e "  ${CYAN}3${NC} │ ${SSL} SSL Settings (Current: ${ENABLE_SSL})"
    echo -e "  ${CYAN}4${NC} │ ${SETTINGS} Authentication"
    echo -e "  ${CYAN}5${NC} │ ${SETTINGS} Environment Variables"
    echo -e "  ${CYAN}6${NC} │ ${SETTINGS} Database Configuration"
    echo ""
    echo -e "  ${CYAN}0${NC} │ Back"
    echo ""
    
    read -p "  Select: " setting_choice
    
    case $setting_choice in
        1) change_port ;;
        2) change_domain ;;
        3) ssl_menu ;;
        4) change_authentication ;;
        5) configure_env_vars ;;
        6) configure_database ;;
        0) return ;;
        *) invalid_option ;;
    esac
    
    settings_menu
}

change_port() {
    print_section "CHANGE PORT"
    
    echo -e "  Current port: ${CYAN}${N8N_PORT}${NC}"
    echo ""
    
    while true; do
        prompt_with_default "Enter new port" "$N8N_PORT" "new_port"
        
        if validate_port "$new_port"; then
            break
        fi
    done
    
    local old_port=$N8N_PORT
    N8N_PORT=$new_port
    
    # Update webhook URL
    if [[ "$WEBHOOK_URL" == *":$old_port/"* ]]; then
        WEBHOOK_URL=$(echo $WEBHOOK_URL | sed "s/:$old_port/:$new_port/")
    fi
    
    echo ""
    echo "  Applying changes..."
    
    case $INSTALL_METHOD in
        docker)
            docker stop n8n 2>/dev/null
            docker rm n8n 2>/dev/null
            setup_docker_container
            ;;
        pm2)
            pm2 stop n8n 2>/dev/null
            pm2 delete n8n 2>/dev/null
            setup_pm2_service
            ;;
        systemd)
            systemctl stop n8n 2>/dev/null
            setup_systemd_service
            systemctl daemon-reload
            systemctl start n8n
            ;;
    esac
    
    configure_firewall_quiet
    save_config
    
    echo -e "  ${GREEN}${CHECK} Port changed to ${new_port}${NC}"
    echo ""
    read -p "Press Enter to continue..."
}

change_domain() {
    print_section "CHANGE DOMAIN"
    
    echo -e "  Current domain: ${CYAN}${N8N_DOMAIN:-Not configured}${NC}"
    echo ""
    
    prompt_with_default "Enter new domain (leave empty to remove)" "" "new_domain"
    
    if [ -z "$new_domain" ]; then
        N8N_DOMAIN=""
        N8N_PROTOCOL="http"
        ENABLE_SSL="false"
        SERVER_IP=$(hostname -I | awk '{print $1}')
        WEBHOOK_URL="http://${SERVER_IP}:${N8N_PORT}/"
        
        rm -f /etc/nginx/sites-enabled/n8n
        rm -f /etc/nginx/sites-available/n8n
        systemctl reload nginx 2>/dev/null
        
        echo -e "  ${GREEN}${CHECK} Domain removed${NC}"
    else
        if validate_domain "$new_domain"; then
            N8N_DOMAIN=$new_domain
            
            echo ""
            read -p "  Enable SSL? [y/N]: " enable_ssl
            
            if [[ "$enable_ssl" =~ ^[Yy]$ ]]; then
                prompt_with_default "SSL email" "$SSL_EMAIL" "SSL_EMAIL"
                if [ -n "$SSL_EMAIL" ]; then
                    ENABLE_SSL="true"
                    N8N_PROTOCOL="https"
                    WEBHOOK_URL="https://${N8N_DOMAIN}/"
                    setup_nginx_with_ssl
                fi
            else
                ENABLE_SSL="false"
                N8N_PROTOCOL="http"
                WEBHOOK_URL="http://${N8N_DOMAIN}:${N8N_PORT}/"
            fi
            
            # Restart service with new settings
            case $INSTALL_METHOD in
                docker)
                    docker stop n8n 2>/dev/null
                    docker rm n8n 2>/dev/null
                    setup_docker_container
                    ;;
                pm2)
                    pm2 restart n8n
                    ;;
                systemd)
                    systemctl restart n8n
                    ;;
            esac
        fi
    fi
    
    save_config
    
    echo ""
    read -p "Press Enter to continue..."
}

ssl_menu() {
    load_config
    print_header
    print_section "SSL CERTIFICATE MANAGEMENT"
    
    echo -e "  Status: ${CYAN}${ENABLE_SSL:-false}${NC}"
    if [ "$ENABLE_SSL" = "true" ]; then
        echo -e "  Domain: ${CYAN}${N8N_DOMAIN}${NC}"
        echo -e "  Email:  ${CYAN}${SSL_EMAIL}${NC}"
    fi
    echo ""
    
    echo -e "  ${CYAN}1${NC} │ ${SSL} Install Certificate"
    echo -e "  ${CYAN}2${NC} │ ${SSL} Renew Certificate"
    echo -e "  ${CYAN}3${NC} │ ${SSL} Remove Certificate"
    echo -e "  ${CYAN}4${NC} │ ${SSL} Test SSL"
    echo ""
    echo -e "  ${CYAN}0${NC} │ Back"
    echo ""
    
    read -p "  Select: " ssl_choice
    
    case $ssl_choice in
        1) install_ssl_certificate ;;
        2) renew_ssl_certificate ;;
        3) remove_ssl_certificate ;;
        4) test_ssl_configuration ;;
        0) return ;;
        *) invalid_option ;;
    esac
    
    ssl_menu
}

install_ssl_certificate() {
    if [ -z "$N8N_DOMAIN" ]; then
        echo ""
        echo -e "${YELLOW}No domain configured${NC}"
        prompt_with_default "Enter domain" "" "N8N_DOMAIN"
        
        if [ -z "$N8N_DOMAIN" ]; then
            echo -e "${RED}Domain required for SSL${NC}"
            sleep 2
            return
        fi
    fi
    
    if [ -z "$SSL_EMAIL" ]; then
        prompt_with_default "Email for SSL" "" "SSL_EMAIL"
    fi
    
    print_section "INSTALLING SSL CERTIFICATE"
    
    setup_nginx_with_ssl &
    show_spinner $! "Installing SSL certificate"
    
    ENABLE_SSL="true"
    N8N_PROTOCOL="https"
    save_config
    
    echo ""
    echo -e "${GREEN}${CHECK} SSL certificate installed!${NC}"
    echo -e "  Access: ${CYAN}https://${N8N_DOMAIN}${NC}"
    
    echo ""
    read -p "Press Enter to continue..."
}

renew_ssl_certificate() {
    print_section "RENEWING SSL CERTIFICATE"
    
    if [ "$ENABLE_SSL" != "true" ] || [ -z "$N8N_DOMAIN" ]; then
        echo -e "${YELLOW}SSL not configured${NC}"
        echo ""
        read -p "Press Enter to continue..."
        return
    fi
    
    certbot renew --nginx -d "$N8N_DOMAIN" --non-interactive &
    show_spinner $! "Renewing certificate"
    
    echo ""
    echo -e "${GREEN}${CHECK} Certificate renewed${NC}"
    echo ""
    read -p "Press Enter to continue..."
}

remove_ssl_certificate() {
    echo ""
    echo -e "${YELLOW}Remove SSL Certificate?${NC}"
    read -p "  Continue? [y/N]: " confirm
    
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        return
    fi
    
    if [ -n "$N8N_DOMAIN" ]; then
        certbot delete --cert-name "$N8N_DOMAIN" --non-interactive &>/dev/null
    fi
    
    ENABLE_SSL="false"
    N8N_PROTOCOL="http"
    save_config
    
    echo -e "  ${GREEN}${CHECK} SSL certificate removed${NC}"
    echo ""
    read -p "Press Enter to continue..."
}

test_ssl_configuration() {
    print_section "TEST SSL CONFIGURATION"
    
    if [ "$ENABLE_SSL" != "true" ] || [ -z "$N8N_DOMAIN" ]; then
        echo -e "${YELLOW}SSL not configured${NC}"
        echo ""
        read -p "Press Enter to continue..."
        return
    fi
    
    echo -e "  Domain: ${CYAN}${N8N_DOMAIN}${NC}"
    echo ""
    
    echo -n "  HTTPS connection: "
    if curl -s -o /dev/null -w "%{http_code}" "https://${N8N_DOMAIN}" 2>/dev/null | grep -q "200\|302"; then
        echo -e "${GREEN}Working${NC}"
    else
        echo -e "${RED}Failed${NC}"
    fi
    
    echo -n "  Certificate status: "
    expiry=$(echo | openssl s_client -servername "$N8N_DOMAIN" -connect "${N8N_DOMAIN}:443" 2>/dev/null | openssl x509 -noout -dates 2>/dev/null | grep notAfter | cut -d= -f2)
    
    if [ -n "$expiry" ]; then
        echo -e "${GREEN}Valid until $expiry${NC}"
    else
        echo -e "${RED}Could not verify${NC}"
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

change_authentication() {
    print_section "AUTHENTICATION SETTINGS"
    
    if [ -n "$BASIC_AUTH_USER" ]; then
        echo -e "  Current user: ${CYAN}${BASIC_AUTH_USER}${NC}"
        echo ""
        echo -e "  ${CYAN}1${NC} │ Change credentials"
        echo -e "  ${CYAN}2${NC} │ Disable authentication"
        echo -e "  ${CYAN}0${NC} │ Cancel"
        echo ""
        
        read -p "  Select: " auth_choice
        
        case $auth_choice in
            1)
                prompt_with_default "Username" "$BASIC_AUTH_USER" "BASIC_AUTH_USER"
                read -s -p "  Password: " BASIC_AUTH_PASS
                echo ""
                save_config
                echo -e "  ${GREEN}${CHECK} Authentication updated${NC}"
                ;;
            2)
                BASIC_AUTH_USER=""
                BASIC_AUTH_PASS=""
                save_config
                echo -e "  ${GREEN}${CHECK} Authentication disabled${NC}"
                ;;
            0) return ;;
        esac
    else
        echo -e "  Authentication is disabled"
        echo ""
        read -p "  Enable authentication? [y/N]: " enable_auth
        
        if [[ "$enable_auth" =~ ^[Yy]$ ]]; then
            prompt_with_default "Username" "" "BASIC_AUTH_USER"
            read -s -p "  Password: " BASIC_AUTH_PASS
            echo ""
            save_config
            echo -e "  ${GREEN}${CHECK} Authentication enabled${NC}"
        fi
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

configure_env_vars() {
    print_section "ENVIRONMENT VARIABLES"
    
    echo -e "  ${CYAN}1${NC} │ Executions Process Mode"
    echo -e "  ${CYAN}2${NC} │ Timezone"
    echo -e "  ${CYAN}3${NC} │ Custom Variable"
    echo -e "  ${CYAN}0${NC} │ Back"
    echo ""
    
    read -p "  Select: " env_choice
    
    case $env_choice in
        1)
            echo ""
            echo -e "  ${CYAN}1${NC} │ regular (default)"
            echo -e "  ${CYAN}2${NC} │ main (all in main process)"
            read -p "  Select: " mode_choice
            
            case $mode_choice in
                1) EXECUTIONS_MODE="regular" ;;
                2) EXECUTIONS_MODE="main" ;;
            esac
            
            echo -e "  ${GREEN}${CHECK} Mode set to ${EXECUTIONS_MODE}${NC}"
            ;;
        2)
            echo ""
            prompt_with_default "Timezone (e.g., Asia/Jakarta)" "Asia/Jakarta" "timezone"
            echo -e "  ${GREEN}${CHECK} Timezone set${NC}"
            ;;
        3)
            echo ""
            prompt_with_default "Variable name" "" "var_name"
            prompt_with_default "Variable value" "" "var_value"
            echo -e "  ${GREEN}${CHECK} Variable set${NC}"
            ;;
        0) return ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..."
}

configure_database() {
    print_section "DATABASE CONFIGURATION"
    
    echo -e "  ${CYAN}1${NC} │ SQLite (default)"
    echo -e "  ${CYAN}2${NC} │ PostgreSQL"
    echo -e "  ${CYAN}3${NC} │ MySQL/MariaDB"
    echo -e "  ${CYAN}0${NC} │ Cancel"
    echo ""
    
    read -p "  Select: " db_choice
    
    case $db_choice in
        1)
            echo -e "  ${GREEN}${CHECK} Using SQLite${NC}"
            ;;
        2)
            echo ""
            prompt_with_default "Host" "localhost" "pg_host"
            prompt_with_default "Port" "5432" "pg_port"
            prompt_with_default "Database" "" "pg_database"
            prompt_with_default "Username" "" "pg_user"
            read -s -p "  Password: " pg_password
            echo ""
            echo -e "  ${GREEN}${CHECK} PostgreSQL configured${NC}"
            ;;
        3)
            echo ""
            prompt_with_default "Host" "localhost" "mysql_host"
            prompt_with_default "Port" "3306" "mysql_port"
            prompt_with_default "Database" "" "mysql_database"
            prompt_with_default "Username" "" "mysql_user"
            read -s -p "  Password: " mysql_password
            echo ""
            echo -e "  ${GREEN}${CHECK} MySQL configured${NC}"
            ;;
        0) return ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..."
}

# ============================================
# WEBHOOK CONFIGURATION
# ============================================

webhook_config() {
    load_config
    print_header
    print_section "WEBHOOK CONFIGURATION"
    
    echo -e "  Current Webhook URL: ${CYAN}${WEBHOOK_URL}${NC}"
    
    if [ -n "$WEBHOOK_TUNNEL_URL" ]; then
        echo -e "  Tunnel URL: ${CYAN}${WEBHOOK_TUNNEL_URL}${NC}"
    fi
    
    echo ""
    echo -e "  ${CYAN}1${NC} │ Update Webhook URL"
    echo -e "  ${CYAN}2${NC} │ Configure Tunnel URL (ngrok, etc.)"
    echo -e "  ${CYAN}3${NC} │ Test Webhook"
    echo -e "  ${CYAN}0${NC} │ Back"
    echo ""
    
    read -p "  Select: " webhook_choice
    
    case $webhook_choice in
        1)
            echo ""
            prompt_with_default "Enter new webhook URL" "$WEBHOOK_URL" "new_webhook"
            WEBHOOK_URL=$new_webhook
            apply_webhook_settings
            save_config
            echo -e "  ${GREEN}${CHECK} Webhook URL updated${NC}"
            ;;
        2)
            echo ""
            prompt_with_default "Enter tunnel URL (leave empty to remove)" "$WEBHOOK_TUNNEL_URL" "tunnel_url"
            WEBHOOK_TUNNEL_URL=$tunnel_url
            apply_webhook_settings
            save_config
            echo -e "  ${GREEN}${CHECK} Tunnel URL configured${NC}"
            ;;
        3)
            echo ""
            echo "  Testing webhook connectivity..."
            if curl -s -o /dev/null -w "%{http_code}" "$WEBHOOK_URL" 2>/dev/null | grep -q "200\|302"; then
                echo -e "  ${GREEN}${CHECK} Webhook is accessible${NC}"
            else
                echo -e "  ${RED}${CROSS} Webhook is not accessible${NC}"
            fi
            ;;
        0) return ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..."
    webhook_config
}

apply_webhook_settings() {
    case $INSTALL_METHOD in
        docker)
            docker stop n8n 2>/dev/null
            docker rm n8n 2>/dev/null
            setup_docker_container
            docker start n8n 2>/dev/null
            ;;
        pm2)
            pm2 stop n8n 2>/dev/null
            pm2 delete n8n 2>/dev/null
            setup_pm2_service
            ;;
        systemd)
            systemctl stop n8n 2>/dev/null
            setup_systemd_service
            systemctl daemon-reload
            systemctl start n8n
            ;;
    esac
}

# ============================================
# MAIN MENU
# ============================================

show_main_menu() {
    while true; do
        print_header
        
        # Get system stats
        IFS='|' read -r cpu mem disk <<< "$(get_system_stats)"
        local n8n_status=$(check_n8n_status)
        local ip=$(hostname -I | awk '{print $1}')
        
        # Status Dashboard
        echo -e "${WHITE}┌─ SYSTEM STATUS ─────────────────────────────────────────────────────┐${NC}"
        
        # System resources line
        printf "${WHITE}│${NC} CPU: "
        if [ "${cpu%.*}" -gt 80 ]; then
            printf "${RED}%-4s${NC}" "${cpu}%"
        elif [ "${cpu%.*}" -gt 60 ]; then
            printf "${YELLOW}%-4s${NC}" "${cpu}%"
        else
            printf "${GREEN}%-4s${NC}" "${cpu}%"
        fi
        
        printf " │ RAM: "
        if [ "${mem%.*}" -gt 80 ]; then
            printf "${RED}%-4s${NC}" "${mem}%"
        elif [ "${mem%.*}" -gt 60 ]; then
            printf "${YELLOW}%-4s${NC}" "${mem}%"
        else
            printf "${GREEN}%-4s${NC}" "${mem}%"
        fi
        
        printf " │ DISK: "
        if [ "$disk" -gt 80 ]; then
            printf "${RED}%-4s${NC}" "${disk}%"
        elif [ "$disk" -gt 60 ]; then
            printf "${YELLOW}%-4s${NC}" "${disk}%"
        else
            printf "${GREEN}%-4s${NC}" "${disk}%"
        fi
        
        printf " │ IP: ${CYAN}%-15s${NC} ${WHITE}│${NC}\n" "$ip"
        
        # n8n status line
        printf "${WHITE}│${NC} n8n Status: "
        case $n8n_status in
            running)
                printf "${GREEN}● Running${NC}"
                if load_config 2>/dev/null; then
                    printf " (${CYAN}%s${NC} on port ${CYAN}%s${NC})" "$INSTALL_METHOD" "$N8N_PORT"
                fi
                printf "%*s${WHITE}│${NC}\n" $((25 - ${#INSTALL_METHOD} - ${#N8N_PORT})) ""
                ;;
            stopped)
                printf "${YELLOW}● Stopped${NC}"
                if load_config 2>/dev/null; then
                    printf " (${CYAN}%s${NC})" "$INSTALL_METHOD"
                fi
                printf "%*s${WHITE}│${NC}\n" $((41 - ${#INSTALL_METHOD})) ""
                ;;
            not_installed)
                printf "${GRAY}○ Not Installed${NC}"
                printf "%*s${WHITE}│${NC}\n" 41 ""
                ;;
            *)
                printf "${RED}● Error${NC}"
                printf "%*s${WHITE}│${NC}\n" 49 ""
                ;;
        esac
        
        echo -e "${WHITE}└──────────────────────────────────────────────────────────────────────┘${NC}"
        echo ""
        
        # Menu based on installation status
        if [ "$n8n_status" = "not_installed" ]; then
            print_section "INSTALLATION OPTIONS"
            echo -e "  ${CYAN}1${NC} │ ${INSTALL} Quick Install ${DIM}(recommended)${NC}"
            echo -e "  ${CYAN}2${NC} │ ${SETTINGS} Custom Install ${DIM}(advanced)${NC}"
            echo ""
            echo -e "  ${CYAN}3${NC} │ ${PORT} Port Check"
            echo -e "  ${CYAN}4${NC} │ ${STATUS} System Info"
        else
            print_section "SERVICE CONTROL"
            if [ "$n8n_status" = "running" ]; then
                echo -e "  ${CYAN}1${NC} │ ${STOP} Stop n8n"
                echo -e "  ${CYAN}2${NC} │ ${RESTART} Restart n8n"
            else
                echo -e "  ${CYAN}1${NC} │ ${PLAY} Start n8n"
                echo -e "  ${CYAN}2${NC} │ ${RESTART} Restart n8n"
            fi
            
            print_section "MANAGEMENT"
            echo -e "  ${CYAN}3${NC} │ ${SETTINGS} Settings"
            echo -e "  ${CYAN}4${NC} │ ${WEBHOOK} Webhook Config"
            echo -e "  ${CYAN}5${NC} │ ${BACKUP} Backup/Restore"
            echo -e "  ${CYAN}6${NC} │ ${UPDATE} Update n8n"
            echo -e "  ${CYAN}7${NC} │ ${STATUS} View Logs"
            echo -e "  ${CYAN}8${NC} │ ${UNINSTALL} Uninstall"
            
            print_section "TOOLS"
            echo -e "  ${CYAN}9${NC} │ ${PORT} Port Check"
            echo -e "  ${CYAN}10${NC} │ ${GLOBE} Test Access"
            echo -e "  ${CYAN}11${NC} │ ${STATUS} System Info"
            
            if [ "$ENABLE_SSL" = "true" ]; then
                echo -e "  ${CYAN}12${NC} │ ${SSL} SSL Management"
            fi
        fi
        
        echo ""
        echo -e "  ${CYAN}0${NC} │ Exit"
        echo ""
        echo -e "${CYAN}───────────────────────────────────────────────────────────────────────────${NC}"
        
        read -p "  Select option: " choice
        
        if [ "$n8n_status" = "not_installed" ]; then
            case $choice in
                1) quick_install ;;
                2) custom_install ;;
                3) check_port ;;
                4) system_info ;;
                0) exit_script ;;
                *) invalid_option ;;
            esac
        else
            case $choice in
                1) 
                    if [ "$n8n_status" = "running" ]; then
                        stop_n8n
                    else
                        start_n8n
                    fi
                    ;;
                2) restart_n8n ;;
                3) settings_menu ;;
                4) webhook_config ;;
                5) backup_restore_menu ;;
                6) update_n8n ;;
                7) view_logs ;;
                8) uninstall_menu ;;
                9) check_port ;;
                10) test_access ;;
                11) system_info ;;
                12) 
                    if [ "$ENABLE_SSL" = "true" ]; then
                        ssl_menu
                    else
                        invalid_option
                    fi
                    ;;
                0) exit_script ;;
                *) invalid_option ;;
            esac
        fi
    done
}

# ============================================
# MAIN EXECUTION
# ============================================

# Initialize OS detection
detect_os

# Start main menu
show_main_menu
