#!/bin/bash

#############################################
# n8n Automation Installer by Vinz
# Complete Installation & Management Script
# Version: 6.0 - FINAL
# Author: Vinz
#############################################

# Exit on any error
set -e

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
BOLD='\033[1m'
DIM='\033[2m'
NC='\033[0m'

# Icons
CHECK="✓"
CROSS="✗"
ARROW="➜"
STAR="★"
DOT="•"
PLAY="▶"
STOP="■"
RESTART="↻"
INSTALL="⬇"
UNINSTALL="🗑"
SETTINGS="⚙"
STATUS="📊"
PORT="🔌"
GLOBE="🌐"
DOCKER="🐳"
NODE="⬢"
PM2="⚡"
SYSTEMD="⚙"
FIRE="🔥"
SPEED="⚡"
INFO="ℹ️"

# Configuration paths
CONFIG_DIR="/etc/n8n-installer"
CONFIG_FILE="${CONFIG_DIR}/config.conf"
LOG_FILE="/var/log/n8n-installer-$(date +%Y%m%d-%H%M%S).log"
INSTALL_LOCK="${CONFIG_DIR}/.installed"

# Default values
N8N_PORT="8000"
N8N_DOMAIN=""
N8N_PROTOCOL="http"
N8N_USER="n8n"
N8N_HOME="/home/n8n"
N8N_VERSION="latest"
WEBHOOK_URL=""
INSTALL_METHOD=""
INSTALL_DATE=""
N8N_BASIC_AUTH_USER=""
N8N_BASIC_AUTH_PASS=""
ADMIN_EMAIL=""
SERVER_IP=""
OS_TYPE=""
OS_VERSION=""
OS_PRETTY=""

# Create config directory
mkdir -p "${CONFIG_DIR}" 2>/dev/null || true

# Detect OS
detect_os() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS_TYPE="${ID}"
        OS_VERSION="${VERSION_ID}"
        OS_PRETTY="${PRETTY_NAME}"
    else
        OS_TYPE="unknown"
        OS_VERSION="unknown"
        OS_PRETTY="Unknown OS"
    fi
}

# Print header
print_header() {
    clear
    echo ""
    echo -e "${CYAN}╔═══════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║${NC}                                                                       ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}         ${MAGENTA}${BOLD}n8n ${WHITE}AUTOMATION ${GREEN}INSTALLER${NC}  ${DIM}v6.0${NC}                           ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}                     ${YELLOW}by Vinz${NC}                                          ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}                                                                       ${CYAN}║${NC}"
    echo -e "${CYAN}╚═══════════════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

# Save configuration
save_config() {
    cat > "${CONFIG_FILE}" <<-EOF
# n8n Configuration
# Generated: $(date)
INSTALL_METHOD="${INSTALL_METHOD}"
N8N_PORT="${N8N_PORT}"
N8N_DOMAIN="${N8N_DOMAIN}"
N8N_PROTOCOL="${N8N_PROTOCOL}"
N8N_USER="${N8N_USER}"
N8N_HOME="${N8N_HOME}"
N8N_VERSION="${N8N_VERSION}"
WEBHOOK_URL="${WEBHOOK_URL}"
INSTALL_DATE="$(date '+%Y-%m-%d %H:%M:%S')"
EOF
    touch "${INSTALL_LOCK}"
}

# Load configuration
load_config() {
    if [[ -f "${CONFIG_FILE}" ]]; then
        # Filter out comments and empty lines
        grep -v '^#' "${CONFIG_FILE}" | grep -v '^$' > /tmp/n8n_config.tmp
        source /tmp/n8n_config.tmp
        rm -f /tmp/n8n_config.tmp
        return 0
    else
        return 1
    fi
}

# Check if n8n is installed
is_n8n_installed() {
    if [[ -f "${INSTALL_LOCK}" ]] && [[ -f "${CONFIG_FILE}" ]]; then
        return 0
    fi
    return 1
}

# Get system stats
get_system_stats() {
    local cpu=$(top -bn1 | grep "Cpu(s)" | awk '{print int($2)}' 2>/dev/null || echo "0")
    local mem=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100}' 2>/dev/null || echo "0")
    local disk=$(df / | awk 'NR==2 {print int($5)}' 2>/dev/null || echo "0")
    echo "${cpu}|${mem}|${disk}"
}

# Check n8n status
check_n8n_status() {
    if ! is_n8n_installed; then
        echo "not_installed"
        return
    fi
    
    load_config
    
    case ${INSTALL_METHOD} in
        docker)
            if docker ps 2>/dev/null | grep -q n8n; then
                echo "running"
            elif docker ps -a 2>/dev/null | grep -q n8n; then
                echo "stopped"
            else
                echo "not_found"
            fi
            ;;
        pm2)
            if pm2 list 2>/dev/null | grep -q n8n; then
                if pm2 list 2>/dev/null | grep n8n | grep -q online; then
                    echo "running"
                else
                    echo "stopped"
                fi
            else
                echo "not_found"
            fi
            ;;
        systemd)
            if systemctl is-active n8n &>/dev/null; then
                echo "running"
            elif systemctl list-units --all 2>/dev/null | grep -q n8n.service; then
                echo "stopped"
            else
                echo "not_found"
            fi
            ;;
        *)
            echo "unknown"
            ;;
    esac
}

# Progress bar
show_progress_bar() {
    local current=$1
    local total=$2
    local task=$3
    local width=40
    
    if [ $total -eq 0 ]; then
        total=1
    fi
    
    local percentage=$((current * 100 / total))
    local filled=$((current * width / total))
    local empty=$((width - filled))
    
    printf "\r  "
    printf "${CYAN}[${NC}"
    
    if [ $filled -gt 0 ]; then
        printf "${GREEN}"
        printf "%${filled}s" | tr ' ' '█'
    fi
    
    if [ $empty -gt 0 ]; then
        printf "${GRAY}"
        printf "%${empty}s" | tr ' ' '░'
    fi
    
    printf "${NC}${CYAN}]${NC} "
    printf "%3d%% " $percentage
    
    if [ -n "$task" ]; then
        printf "${WHITE}%s${NC}" "$task"
    fi
    
    if [ $percentage -eq 100 ]; then
        echo ""
    fi
}

# Spinner animation
show_spinner() {
    local pid=$1
    local task=$2
    local spin='⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏'
    local i=0
    
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i+1) % ${#spin} ))
        printf "\r  ${CYAN}[${spin:$i:1}]${NC} %s" "$task"
        sleep 0.1
    done
    
    wait $pid
    local result=$?
    
    if [ $result -eq 0 ]; then
        printf "\r  ${GREEN}[${CHECK}]${NC} %s\n" "$task"
    else
        printf "\r  ${RED}[${CROSS}]${NC} %s\n" "$task"
    fi
    
    return $result
}

# Main menu
show_main_menu() {
    while true; do
        print_header
        
        # Get system stats
        IFS='|' read -r cpu mem disk <<< "$(get_system_stats)"
        local n8n_status=$(check_n8n_status)
        local ip=$(hostname -I | awk '{print $1}')
        
        # Status bar
        echo -e "${WHITE}SYSTEM STATUS${NC}"
        echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
        
        printf "  CPU: "
        if [ "${cpu}" -gt 80 ]; then
            printf "${RED}%s%%${NC}" "$cpu"
        elif [ "${cpu}" -gt 60 ]; then
            printf "${YELLOW}%s%%${NC}" "$cpu"
        else
            printf "${GREEN}%s%%${NC}" "$cpu"
        fi
        
        printf "  RAM: "
        if [ "${mem}" -gt 80 ]; then
            printf "${RED}%s%%${NC}" "$mem"
        elif [ "${mem}" -gt 60 ]; then
            printf "${YELLOW}%s%%${NC}" "$mem"
        else
            printf "${GREEN}%s%%${NC}" "$mem"
        fi
        
        printf "  DISK: "
        if [ "$disk" -gt 80 ]; then
            printf "${RED}%s%%${NC}" "$disk"
        elif [ "$disk" -gt 60 ]; then
            printf "${YELLOW}%s%%${NC}" "$disk"
        else
            printf "${GREEN}%s%%${NC}" "$disk"
        fi
        
        printf "  IP: ${CYAN}%s${NC}\n" "$ip"
        
        # n8n status
        printf "  n8n: "
        case $n8n_status in
            running)
                printf "${GREEN}● Running${NC}"
                if load_config 2>/dev/null; then
                    printf " (${CYAN}%s${NC} on port ${CYAN}%s${NC})" "$INSTALL_METHOD" "$N8N_PORT"
                fi
                ;;
            stopped)
                printf "${YELLOW}● Stopped${NC}"
                if load_config 2>/dev/null; then
                    printf " (${CYAN}%s${NC})" "$INSTALL_METHOD"
                fi
                ;;
            not_installed)
                printf "${GRAY}○ Not Installed${NC}"
                ;;
            *)
                printf "${RED}● Error${NC}"
                ;;
        esac
        echo ""
        echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
        echo ""
        
        # Menu based on installation status
        if [ "$n8n_status" = "not_installed" ]; then
            # Not installed menu
            echo -e "${WHITE}INSTALLATION${NC}"
            echo -e "  ${CYAN}[1]${NC} ${ROCKET} Quick Install"
            echo -e "  ${CYAN}[2]${NC} ${PACKAGE} Custom Install"
            echo ""
            echo -e "${WHITE}TOOLS${NC}"
            echo -e "  ${CYAN}[3]${NC} ${PORT} Port Check"
            echo -e "  ${CYAN}[4]${NC} ${SPEED} Speed Test"
            echo -e "  ${CYAN}[5]${NC} ${INFO} System Info"
            echo ""
            echo -e "  ${CYAN}[0]${NC} Exit"
            echo ""
            echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
            
            read -p "  Select: " choice
            
            case $choice in
                1) quick_install ;;
                2) custom_install ;;
                3) check_port ;;
                4) speed_test ;;
                5) system_info ;;
                0) exit_script ;;
                *) invalid_option ;;
            esac
        else
            # Installed menu
            echo -e "${WHITE}SERVICE${NC}"
            
            if [ "$n8n_status" = "running" ]; then
                echo -e "  ${CYAN}[1]${NC} ${STOP} Stop n8n"
                echo -e "  ${CYAN}[2]${NC} ${RESTART} Restart n8n"
            else
                echo -e "  ${CYAN}[1]${NC} ${PLAY} Start n8n"
                echo -e "  ${CYAN}[2]${NC} ${RESTART} Restart n8n"
            fi
            
            echo -e "  ${CYAN}[3]${NC} ${STATUS} Check Status"
            echo ""
            
            echo -e "${WHITE}MANAGEMENT${NC}"
            echo -e "  ${CYAN}[4]${NC} ${SETTINGS} Change Settings"
            echo -e "  ${CYAN}[5]${NC} ${UNINSTALL} Uninstall"
            echo -e "  ${CYAN}[6]${NC} ${FIRE} Reinstall"
            echo ""
            
            echo -e "${WHITE}TOOLS${NC}"
            echo -e "  ${CYAN}[7]${NC} ${PORT} Port Management"
            echo -e "  ${CYAN}[8]${NC} ${SHIELD} Check Port (External)"
            echo -e "  ${CYAN}[9]${NC} ${SPEED} Speed Test"
            echo -e "  ${CYAN}[10]${NC} ${GLOBE} Test Access"
            echo -e "  ${CYAN}[11]${NC} ${GEAR} Advanced Tools"
            echo -e "  ${CYAN}[12]${NC} ${STATUS} View Logs"
            echo -e "  ${CYAN}[13]${NC} ${INFO} System Information"
            echo ""
            echo -e "  ${CYAN}[0]${NC} Exit"
            echo ""
            echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
            
            read -p "  Select: " choice
            
            case $choice in
                1) 
                    if [ "$n8n_status" = "running" ]; then
                        stop_n8n
                    else
                        start_n8n
                    fi
                    ;;
                2) restart_n8n ;;
                3) check_status ;;
                4) change_settings ;;
                5) uninstall_menu ;;
                6) reinstall_n8n ;;
                7) port_management ;;
                8) check_port_external ;;
                9) speed_test ;;
                10) test_access ;;
                11) advanced_tools ;;
                12) view_logs ;;
                13) system_info ;;
                0) exit_script ;;
                *) invalid_option ;;
            esac
        fi
    done
}

# Quick install
quick_install() {
    print_header
    echo -e "${WHITE}${BOLD}QUICK INSTALLATION${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    # Select installation method
    echo -e "${WHITE}Select Installation Method:${NC}"
    echo ""
    
    local docker_status="${RED}Not Installed${NC}"
    local node_status="${RED}Not Installed${NC}"
    
    if command -v docker &>/dev/null; then
        docker_status="${GREEN}Installed${NC}"
    fi
    
    if command -v node &>/dev/null; then
        local node_ver=$(node -v | sed 's/v//' | cut -d. -f1)
        if [ "$node_ver" -ge 18 ]; then
            node_status="${GREEN}v$(node -v | sed 's/v//')${NC}"
        else
            node_status="${YELLOW}v$(node -v | sed 's/v//') (needs update)${NC}"
        fi
    fi
    
    echo -e "  ${CYAN}[1]${NC} ${DOCKER} Docker     ${GRAY}($docker_status)${NC}"
    echo -e "  ${CYAN}[2]${NC} ${PM2} PM2        ${GRAY}(Node.js: $node_status)${NC}"
    echo -e "  ${CYAN}[3]${NC} ${SYSTEMD} Systemd    ${GRAY}(Node.js: $node_status)${NC}"
    echo -e "  ${CYAN}[0]${NC} Cancel"
    echo ""
    
    read -p "  Select: " method_choice
    
    case $method_choice in
        1) INSTALL_METHOD="docker" ;;
        2) INSTALL_METHOD="pm2" ;;
        3) INSTALL_METHOD="systemd" ;;
        0) return ;;
        *) 
            echo -e "${RED}Invalid option${NC}"
            sleep 2
            return
            ;;
    esac
    
    # Set defaults
    N8N_PORT="8000"
    N8N_USER="n8n"
    N8N_HOME="/home/n8n"
    N8N_VERSION="latest"
    N8N_DOMAIN=""
    N8N_PROTOCOL="http"
    SERVER_IP=$(hostname -I | awk '{print $1}')
    WEBHOOK_URL="http://${SERVER_IP}:${N8N_PORT}/"
    
    echo ""
    echo -e "${WHITE}Installation Configuration:${NC}"
    echo -e "  Method: ${CYAN}${INSTALL_METHOD}${NC}"
    echo -e "  Port: ${CYAN}${N8N_PORT}${NC}"
    echo ""
    
    read -p "  Proceed? [Y/n]: " confirm
    confirm=${confirm:-Y}
    
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        return
    fi
    
    # Start installation
    echo ""
    echo -e "${WHITE}${BOLD}INSTALLATION PROGRESS${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    local current=0
    local total=5
    
    # Step 1: Dependencies
    ((current++))
    show_progress_bar $current $total "Installing dependencies..."
    install_dependencies
    
    # Step 2: Method-specific installation
    ((current++))
    if [[ "$INSTALL_METHOD" == "docker" ]]; then
        show_progress_bar $current $total "Installing Docker..."
        install_docker
    else
        show_progress_bar $current $total "Installing Node.js..."
        install_nodejs
    fi
    
    # Step 3: Create user (non-Docker only)
    ((current++))
    if [[ "$INSTALL_METHOD" != "docker" ]]; then
        show_progress_bar $current $total "Creating n8n user..."
        create_n8n_user
    else
        show_progress_bar $current $total "Preparing Docker..."
    fi
    
    # Step 4: Install n8n
    ((current++))
    show_progress_bar $current $total "Installing n8n..."
    install_n8n
    
    # Step 5: Configure firewall
    ((current++))
    show_progress_bar $current $total "Configuring firewall..."
    configure_firewall
    
    # Save configuration
    save_config
    
    # Show completion
    echo ""
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}${BOLD}                    ${CHECK} INSTALLATION SUCCESSFUL!${NC}"
    echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    
    echo -e "${WHITE}${BOLD}ACCESS INFORMATION${NC}"
    echo -e "${CYAN}┌────────────────────────────────────────────────────────────────────┐${NC}"
    echo -e "${CYAN}│${NC}  ${GLOBE} URL: ${GREEN}${BOLD}http://${SERVER_IP}:${N8N_PORT}${NC}"
    echo -e "${CYAN}│${NC}  Method: ${CYAN}${INSTALL_METHOD}${NC}"
    echo -e "${CYAN}│${NC}  Port: ${CYAN}${N8N_PORT}${NC}"
    echo -e "${CYAN}│${NC}  Status: ${GREEN}Active${NC}"
    echo -e "${CYAN}└────────────────────────────────────────────────────────────────────┘${NC}"
    echo ""
    
    read -p "Press Enter to continue..."
}

# Installation functions
install_dependencies() {
    if [[ "$OS_TYPE" == "ubuntu" ]] || [[ "$OS_TYPE" == "debian" ]]; then
        apt-get update -qq 2>/dev/null
        apt-get install -y -qq curl wget git build-essential 2>/dev/null
    elif [[ "$OS_TYPE" == "centos" ]] || [[ "$OS_TYPE" == "rhel" ]]; then
        yum update -y -q 2>/dev/null
        yum install -y -q curl wget git 2>/dev/null
    fi
}

install_docker() {
    if ! command -v docker &>/dev/null; then
        curl -fsSL https://get.docker.com -o /tmp/get-docker.sh 2>/dev/null
        sh /tmp/get-docker.sh >/dev/null 2>&1
        systemctl start docker
        systemctl enable docker >/dev/null 2>&1
    fi
}

install_nodejs() {
    if ! command -v node &>/dev/null || [ $(node -v | sed 's/v//' | cut -d. -f1) -lt 18 ]; then
        if [[ "$OS_TYPE" == "ubuntu" ]] || [[ "$OS_TYPE" == "debian" ]]; then
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash - >/dev/null 2>&1
            apt-get install -y -qq nodejs 2>/dev/null
        elif [[ "$OS_TYPE" == "centos" ]] || [[ "$OS_TYPE" == "rhel" ]]; then
            curl -fsSL https://rpm.nodesource.com/setup_18.x | bash - >/dev/null 2>&1
            yum install -y -q nodejs 2>/dev/null
        fi
    fi
}

create_n8n_user() {
    if ! id "$N8N_USER" &>/dev/null; then
        useradd -m -d "$N8N_HOME" -s /bin/bash "$N8N_USER"
    fi
    mkdir -p "$N8N_HOME/.n8n"
    chown -R "$N8N_USER:$N8N_USER" "$N8N_HOME"
    chmod 755 "$N8N_HOME/.n8n"
}

install_n8n() {
    case $INSTALL_METHOD in
        docker)
            # Pull and run Docker container with proper permissions
            docker pull n8nio/n8n:latest >/dev/null 2>&1
            
            # Create volume directory with proper permissions
            mkdir -p /var/lib/n8n-data
            chmod 777 /var/lib/n8n-data
            
            docker run -d \
                --name n8n \
                --restart unless-stopped \
                -p ${N8N_PORT}:5678 \
                -e N8N_BASIC_AUTH_ACTIVE=false \
                -e N8N_HOST=0.0.0.0 \
                -e N8N_PORT=5678 \
                -e N8N_PROTOCOL=http \
                -e WEBHOOK_URL=http://$(hostname -I | awk '{print $1}'):${N8N_PORT}/ \
                -v /var/lib/n8n-data:/home/node/.n8n \
                --user root \
                n8nio/n8n:latest >/dev/null 2>&1
            ;;
            
        pm2)
            cd "$N8N_HOME"
            sudo -u "$N8N_USER" npm init -y >/dev/null 2>&1
            sudo -u "$N8N_USER" npm install n8n >/dev/null 2>&1
            
            # Install PM2
            npm install -g pm2 >/dev/null 2>&1
            
            # Create ecosystem file
            cat > ${N8N_HOME}/ecosystem.config.js <<EOF
module.exports = {
  apps: [{
    name: 'n8n',
    script: '${N8N_HOME}/node_modules/n8n/bin/n8n',
    env: {
      N8N_PORT: ${N8N_PORT},
      N8N_HOST: '0.0.0.0'
    }
  }]
};
EOF
            chown ${N8N_USER}:${N8N_USER} ${N8N_HOME}/ecosystem.config.js
            sudo -u ${N8N_USER} pm2 start ${N8N_HOME}/ecosystem.config.js >/dev/null 2>&1
            sudo -u ${N8N_USER} pm2 save >/dev/null 2>&1
            pm2 startup systemd -u ${N8N_USER} --hp ${N8N_HOME} >/dev/null 2>&1
            ;;
            
        systemd)
            cd "$N8N_HOME"
            sudo -u "$N8N_USER" npm init -y >/dev/null 2>&1
            sudo -u "$N8N_USER" npm install n8n >/dev/null 2>&1
            
            # Create systemd service
            cat > /etc/systemd/system/n8n.service <<EOF
[Unit]
Description=n8n - Workflow Automation Tool
After=network.target

[Service]
Type=simple
User=${N8N_USER}
Group=${N8N_USER}
WorkingDirectory=${N8N_HOME}
Environment="N8N_PORT=${N8N_PORT}"
Environment="N8N_HOST=0.0.0.0"
ExecStart=${N8N_HOME}/node_modules/.bin/n8n
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
            systemctl daemon-reload
            systemctl enable n8n >/dev/null 2>&1
            systemctl start n8n
            ;;
    esac
}

configure_firewall() {
    if command -v ufw &>/dev/null; then
        ufw allow ${N8N_PORT}/tcp >/dev/null 2>&1
    elif command -v firewall-cmd &>/dev/null; then
        firewall-cmd --permanent --add-port=${N8N_PORT}/tcp >/dev/null 2>&1
        firewall-cmd --reload >/dev/null 2>&1
    fi
}

# Service control functions
start_n8n() {
    load_config
    print_header
    echo -e "${WHITE}${BOLD}STARTING N8N SERVICE${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    case $INSTALL_METHOD in
        docker)
            docker start n8n 2>/dev/null && echo -e "  ${GREEN}${CHECK} Docker container started${NC}"
            ;;
        pm2)
            pm2 start n8n 2>/dev/null && echo -e "  ${GREEN}${CHECK} PM2 service started${NC}"
            ;;
        systemd)
            systemctl start n8n && echo -e "  ${GREEN}${CHECK} Systemd service started${NC}"
            ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..."
}

stop_n8n() {
    load_config
    print_header
    echo -e "${WHITE}${BOLD}STOPPING N8N SERVICE${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    case $INSTALL_METHOD in
        docker)
            docker stop n8n 2>/dev/null && echo -e "  ${YELLOW}Service stopped${NC}"
            ;;
        pm2)
            pm2 stop n8n 2>/dev/null && echo -e "  ${YELLOW}Service stopped${NC}"
            ;;
        systemd)
            systemctl stop n8n && echo -e "  ${YELLOW}Service stopped${NC}"
            ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..."
}

restart_n8n() {
    load_config
    print_header
    echo -e "${WHITE}${BOLD}RESTARTING N8N SERVICE${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    case $INSTALL_METHOD in
        docker)
            docker restart n8n 2>/dev/null && echo -e "  ${GREEN}${CHECK} Docker container restarted${NC}"
            ;;
        pm2)
            pm2 restart n8n 2>/dev/null && echo -e "  ${GREEN}${CHECK} PM2 service restarted${NC}"
            ;;
        systemd)
            systemctl restart n8n && echo -e "  ${GREEN}${CHECK} Systemd service restarted${NC}"
            ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..."
}

# View logs
view_logs() {
    load_config
    print_header
    echo -e "${WHITE}${BOLD}N8N LOGS${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    case $INSTALL_METHOD in
        docker)
            docker logs n8n --tail 50 2>&1
            ;;
        pm2)
            pm2 logs n8n --lines 50 --nostream
            ;;
        systemd)
            journalctl -u n8n -n 50 --no-pager
            ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..."
}

# Uninstall menu
uninstall_menu() {
    load_config
    print_header
    echo -e "${WHITE}${BOLD}UNINSTALL N8N${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    echo -e "${YELLOW}${BOLD}WARNING: This will remove n8n from your system${NC}"
    echo ""
    
    echo -e "  ${CYAN}[1]${NC} Complete Uninstall (remove everything)"
    echo -e "  ${CYAN}[2]${NC} Keep Data (remove n8n but keep workflows)"
    echo -e "  ${CYAN}[0]${NC} Cancel"
    echo ""
    
    read -p "  Select: " uninstall_choice
    
    case $uninstall_choice in
        1) 
            echo ""
            echo -e "  ${RED}This will remove all n8n data!${NC}"
            read -p "  Type 'yes' to confirm: " confirm
            if [ "$confirm" = "yes" ]; then
                complete_uninstall
            fi
            ;;
        2) 
            uninstall_keep_data
            ;;
        0) 
            return 
            ;;
    esac
}

complete_uninstall() {
    echo ""
    echo -e "  Removing n8n..."
    
    case $INSTALL_METHOD in
        docker)
            docker stop n8n 2>/dev/null
            docker rm n8n 2>/dev/null
            docker rmi n8nio/n8n 2>/dev/null
            rm -rf /var/lib/n8n-data
            ;;
        pm2)
            pm2 stop n8n 2>/dev/null
            pm2 delete n8n 2>/dev/null
            rm -rf "$N8N_HOME"
            ;;
        systemd)
            systemctl stop n8n 2>/dev/null
            systemctl disable n8n 2>/dev/null
            rm -f /etc/systemd/system/n8n.service
            rm -rf "$N8N_HOME"
            ;;
    esac
    
    rm -f "$CONFIG_FILE"
    rm -f "$INSTALL_LOCK"
    
    echo -e "  ${GREEN}${CHECK} n8n has been completely uninstalled${NC}"
    echo ""
    read -p "Press Enter to continue..."
    show_main_menu
}

uninstall_keep_data() {
    echo ""
    echo -e "  Removing n8n (keeping data)..."
    
    case $INSTALL_METHOD in
        docker)
            docker stop n8n 2>/dev/null
            docker rm n8n 2>/dev/null
            echo -e "  ${GREEN}${CHECK} Container removed, data preserved in /var/lib/n8n-data${NC}"
            ;;
        pm2)
            pm2 stop n8n 2>/dev/null
            pm2 delete n8n 2>/dev/null
            echo -e "  ${GREEN}${CHECK} PM2 service removed, data preserved in $N8N_HOME/.n8n${NC}"
            ;;
        systemd)
            systemctl stop n8n 2>/dev/null
            systemctl disable n8n 2>/dev/null
            rm -f /etc/systemd/system/n8n.service
            echo -e "  ${GREEN}${CHECK} Service removed, data preserved in $N8N_HOME/.n8n${NC}"
            ;;
    esac
    
    rm -f "$CONFIG_FILE"
    rm -f "$INSTALL_LOCK"
    
    echo ""
    read -p "Press Enter to continue..."
    show_main_menu
}

# Placeholder functions with basic implementation
custom_install() {
    quick_install
}

check_status() {
    load_config
    print_header
    echo -e "${WHITE}${BOLD}N8N SERVICE STATUS${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    local status=$(check_n8n_status)
    echo -e "  Status: $(
        case $status in
            running) echo -e "${GREEN}● Running${NC}" ;;
            stopped) echo -e "${YELLOW}● Stopped${NC}" ;;
            *) echo -e "${RED}● Not Found${NC}" ;;
        esac
    )"
    
    echo -e "  Method: ${CYAN}$INSTALL_METHOD${NC}"
    echo -e "  Port: ${CYAN}$N8N_PORT${NC}"
    echo -e "  URL: ${CYAN}http://$(hostname -I | awk '{print $1}'):${N8N_PORT}${NC}"
    
    echo ""
    read -p "Press Enter to continue..."
}

change_settings() {
    echo -e "${YELLOW}Settings management - Use reinstall for changes${NC}"
    sleep 2
}

reinstall_n8n() {
    uninstall_keep_data
    quick_install
}

port_management() {
    print_header
    echo -e "${WHITE}${BOLD}PORT MANAGEMENT${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    echo -e "  Open ports:"
    ss -tuln | grep LISTEN | awk '{print $5}' | sed 's/.*://' | sort -n | uniq | while read port; do
        echo -e "    ${CYAN}$port${NC}"
    done
    
    echo ""
    read -p "Press Enter to continue..."
}

check_port_external() {
    check_port
}

check_port() {
    print_header
    echo -e "${WHITE}${BOLD}PORT CHECK${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    if load_config 2>/dev/null; then
        echo -e "  Checking port ${CYAN}$N8N_PORT${NC}..."
        if nc -zv localhost $N8N_PORT 2>/dev/null; then
            echo -e "  ${GREEN}${CHECK} Port is open${NC}"
        else
            echo -e "  ${RED}${CROSS} Port is closed${NC}"
        fi
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

speed_test() {
    print_header
    echo -e "${WHITE}${BOLD}SPEED TEST${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    echo -e "  Testing network speed..."
    echo ""
    
    # Simple speed test
    echo -e "  Download speed:"
    curl -o /dev/null https://speed.cloudflare.com/__down?bytes=10000000 2>&1 | grep -o "[0-9.]* MB/s" || echo "    Test failed"
    
    echo ""
    read -p "Press Enter to continue..."
}

test_access() {
    load_config
    print_header
    echo -e "${WHITE}${BOLD}TEST ACCESS${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    local server_ip=$(hostname -I | awk '{print $1}')
    echo -e "  Testing n8n access..."
    echo -e "  URL: ${CYAN}http://${server_ip}:${N8N_PORT}${NC}"
    echo ""
    
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:${N8N_PORT} 2>/dev/null | grep -q "200\|302"; then
        echo -e "  ${GREEN}${CHECK} n8n is accessible${NC}"
    else
        echo -e "  ${RED}${CROSS} n8n is not accessible${NC}"
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

advanced_tools() {
    print_header
    echo -e "${WHITE}${BOLD}ADVANCED TOOLS${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    echo -e "  ${CYAN}[1]${NC} View Logs"
    echo -e "  ${CYAN}[2]${NC} Restart Service"
    echo -e "  ${CYAN}[3]${NC} Check Status"
    echo -e "  ${CYAN}[0]${NC} Back"
    echo ""
    
    read -p "  Select: " tool_choice
    
    case $tool_choice in
        1) view_logs ;;
        2) restart_n8n ;;
        3) check_status ;;
        0) return ;;
    esac
}

system_info() {
    print_header
    echo -e "${WHITE}${BOLD}SYSTEM INFORMATION${NC}"
    echo -e "${GRAY}─────────────────────────────────────────────────────────────────────────${NC}"
    echo ""
    
    echo -e "  OS: ${CYAN}${OS_PRETTY}${NC}"
    echo -e "  Kernel: ${CYAN}$(uname -r)${NC}"
    echo -e "  CPU: ${CYAN}$(lscpu | grep 'Model name' | sed 's/Model name://g' | xargs)${NC}"
    echo -e "  Cores: ${CYAN}$(nproc)${NC}"
    echo -e "  Memory: ${CYAN}$(free -h | awk '/^Mem:/ {print $2}')${NC}"
    echo -e "  Disk: ${CYAN}$(df -h / | awk 'NR==2 {print $2}')${NC}"
    echo -e "  Uptime: ${CYAN}$(uptime -p)${NC}"
    
    echo ""
    read -p "Press Enter to continue..."
}

invalid_option() {
    echo -e "${RED}Invalid option${NC}"
    sleep 1
}

exit_script() {
    echo ""
    echo -e "${GREEN}Thank you for using n8n Installer by Vinz!${NC}"
    echo ""
    exit 0
}

# Check root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}This script must be run as root${NC}"
        echo -e "${YELLOW}Please run: sudo $0${NC}"
        exit 1
    fi
}

# Main execution
main() {
    check_root
    detect_os
    show_main_menu
}

# Start the script
main "$@"
